(()=>{"use strict";var n={193:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([n.id,"button {\r\n    background: none;\r\n    border: none;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    transition: 0.1s;\r\n    cursor: pointer;\r\n    /* box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px; */\r\n}\r\n\r\nbutton:hover {\r\n  background-color: blanchedalmond;\r\n  background: #ebe9e9;\r\n}\r\n\r\n.add-project-btn {\r\n  padding: 3px;\r\n  display: grid;\r\n  place-items: center;\r\n  color: grey;\r\n}\r\n\r\n.fullscreen-btn {\r\n    /* position: fixed; */\r\n    bottom: 0px;\r\n    left: 0px;\r\n    /* background: grey; */\r\n    color: white;\r\n    /* padding: 10px; */\r\n    border-top-right-radius: 5px;\r\n    z-index: 2;\r\n}\r\n\r\n.close-details-button, .close-edit-button {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n} \r\n\r\n.details-button {\r\n    padding: 7px;\r\n    /* border: 1px solid rgb(143, 143, 252); */\r\n    border-radius: 5px;\r\n    /* box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px; */\r\n}\r\n\r\n.nav-toggle {\r\n    display: grid;\r\n    place-items: center;\r\n    /* padding: 5px; */\r\n    /* box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px, rgba(0, 0, 0, 0.1) 0px 0px 1px 0px; */\r\n}\r\n\r\n.nav-toggle:hover {\r\n  background: initial;\r\n}\r\n\r\n/* .submit-task {\r\n  background: #db4c3f;\r\n  color: white;\r\n} */\r\n\r\n.submit {\r\n  background: #db4c3f;\r\n  color: white;\r\n}\r\n\r\n.submit:hover {\r\n  color: black;\r\n}\r\n\r\n.cancel {\r\n  background-color: black;\r\n  color: white;\r\n}\r\n\r\n.cancel:hover {\r\n  color: black;\r\n}\r\n\r\n\r\n\r\n  ","",{version:3,sources:["webpack://./src/styles/buttonsAndLinks.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,kFAAkF;AACtF;;AAEA;EACE,gCAAgC;EAChC,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;IACI,qBAAqB;IACrB,WAAW;IACX,SAAS;IACT,sBAAsB;IACtB,YAAY;IACZ,mBAAmB;IACnB,4BAA4B;IAC5B,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,0CAA0C;IAC1C,kBAAkB;IAClB,kFAAkF;AACtF;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,wFAAwF;AAC5F;;AAEA;EACE,mBAAmB;AACrB;;AAEA;;;GAGG;;AAEH;EACE,mBAAmB;EACnB,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,uBAAuB;EACvB,YAAY;AACd;;AAEA;EACE,YAAY;AACd",sourcesContent:["button {\r\n    background: none;\r\n    border: none;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    transition: 0.1s;\r\n    cursor: pointer;\r\n    /* box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px; */\r\n}\r\n\r\nbutton:hover {\r\n  background-color: blanchedalmond;\r\n  background: #ebe9e9;\r\n}\r\n\r\n.add-project-btn {\r\n  padding: 3px;\r\n  display: grid;\r\n  place-items: center;\r\n  color: grey;\r\n}\r\n\r\n.fullscreen-btn {\r\n    /* position: fixed; */\r\n    bottom: 0px;\r\n    left: 0px;\r\n    /* background: grey; */\r\n    color: white;\r\n    /* padding: 10px; */\r\n    border-top-right-radius: 5px;\r\n    z-index: 2;\r\n}\r\n\r\n.close-details-button, .close-edit-button {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n} \r\n\r\n.details-button {\r\n    padding: 7px;\r\n    /* border: 1px solid rgb(143, 143, 252); */\r\n    border-radius: 5px;\r\n    /* box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px; */\r\n}\r\n\r\n.nav-toggle {\r\n    display: grid;\r\n    place-items: center;\r\n    /* padding: 5px; */\r\n    /* box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px, rgba(0, 0, 0, 0.1) 0px 0px 1px 0px; */\r\n}\r\n\r\n.nav-toggle:hover {\r\n  background: initial;\r\n}\r\n\r\n/* .submit-task {\r\n  background: #db4c3f;\r\n  color: white;\r\n} */\r\n\r\n.submit {\r\n  background: #db4c3f;\r\n  color: white;\r\n}\r\n\r\n.submit:hover {\r\n  color: black;\r\n}\r\n\r\n.cancel {\r\n  background-color: black;\r\n  color: white;\r\n}\r\n\r\n.cancel:hover {\r\n  color: black;\r\n}\r\n\r\n\r\n\r\n  "],sourceRoot:""}]);const A=i},206:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([n.id,":root {\r\n    --low-priority: rgb(167, 238, 167);\r\n    --medium-priority: rgb(240, 220, 107);\r\n    --high-priority: rgb(247, 124, 120);\r\n}\r\n\r\n.details-window, .edit-window {\r\n    width: min(700px, 90vw);\r\n    min-height: 300px;\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%; \r\n    transform: translate(-50%, -50%) scale(1);\r\n    z-index: 20;\r\n    background: white;\r\n    border-radius: 5px;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transition: 0.3s;\r\n    opacity: 1;\r\n    animation: displayEnter 0.4s;\r\n    /* animation: altDisplayEnter 0.4s; */\r\n    /* will-change: transform, opacity; */\r\n}\r\n\r\n@keyframes displayEnter {\r\n    0% {\r\n        opacity: 0;\r\n        /* top: 40%; */\r\n        /* transform: translate(-50%, -50%) scale(1);  */\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n@keyframes altDisplayEnter {\r\n    0% {\r\n        opacity: 0;\r\n        /* top: 40%; */\r\n        /* transform: translate(-50%, -50%) scale(1);  */\r\n    }\r\n    2% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\nlabel {\r\n    /* background: khaki; */\r\n    width: 50%;\r\n}\r\n\r\n.details-window {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 20px;\r\n    background: var(--medium-priority);\r\n    top: 50%;\r\n    left: 50%; \r\n    transform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n/* .close-details-button {\r\n    position: relative;\r\n} */\r\n\r\n\r\n.details-window div:first-child {\r\n    display: flex;\r\n}\r\n\r\n.details-window div:nth-child(2) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 10px;\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\n.details-description {\r\n}\r\n\r\n\r\n.details-title {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    /* width: 200px; */\r\n    color:rgb(82, 116, 102);\r\n    text-decoration: underline;\r\n}\r\n.details-label {\r\n    font-size: 12px;\r\n    font-weight: bold;\r\n    opacity: 0.4;\r\n    position: absolute;\r\n    bottom: 10px;\r\n    right: 10px;\r\n}\r\n\r\n.details-priority {\r\n    /* border: 1px solid red; */\r\n    /* align-self: center; */\r\n    border-radius: 4px;\r\n    padding: 5px;\r\n    color: rgb(80, 80, 80);\r\n    background: yellow;\r\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\r\n}\r\n\r\n.priority-meter {\r\n    color: black;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 60px;\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n\r\n    \r\n    position: sticky;\r\n    z-index: 2000;\r\n    bottom: 0;\r\n    left:0;\r\n}\r\n\r\n.priority-meter > * {\r\n    padding-left: 4px;\r\n    border-radius: 3px;\r\n}\r\n\r\n.low {\r\n    background-color: var(--low-priority);\r\n}\r\n.medium {\r\n    background-color: rgb(240, 220, 107);\r\n\r\n}\r\n.high {\r\n    background-color: var(--high-priority);\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .details-window {\r\n        width: 100vw;\r\n        min-height: 50vh;\r\n        /* margin-top: 1vh; */\r\n        /* z-index: 200; */\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","",{version:3,sources:["webpack://./src/styles/detailsWindow.css"],names:[],mappings:"AAAA;IACI,kCAAkC;IAClC,qCAAqC;IACrC,mCAAmC;AACvC;;AAEA;IACI,uBAAuB;IACvB,iBAAiB;IACjB,eAAe;IACf,QAAQ;IACR,SAAS;IACT,yCAAyC;IACzC,WAAW;IACX,iBAAiB;IACjB,kBAAkB;IAClB,yFAAyF;IACzF,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,gBAAgB;IAChB,UAAU;IACV,4BAA4B;IAC5B,qCAAqC;IACrC,qCAAqC;AACzC;;AAEA;IACI;QACI,UAAU;QACV,cAAc;QACd,gDAAgD;IACpD;IACA;QACI,UAAU;IACd;AACJ;AACA;IACI;QACI,UAAU;QACV,cAAc;QACd,gDAAgD;IACpD;IACA;QACI,UAAU;IACd;IACA;QACI,UAAU;IACd;AACJ;;AAEA;IACI,uBAAuB;IACvB,UAAU;AACd;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;IACT,kCAAkC;IAClC,QAAQ;IACR,SAAS;IACT,yCAAyC;AAC7C;;AAEA;;GAEG;;;AAGH;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;IACT,WAAW;IACX,gBAAgB;AACpB;;AAEA;AACA;;;AAGA;IACI,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,uBAAuB;IACvB,0BAA0B;AAC9B;AACA;IACI,eAAe;IACf,iBAAiB;IACjB,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,2BAA2B;IAC3B,wBAAwB;IACxB,kBAAkB;IAClB,YAAY;IACZ,sBAAsB;IACtB,kBAAkB;IAClB,4EAA4E;AAChF;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,WAAW;IACX,eAAe;IACf,iBAAiB;;;IAGjB,gBAAgB;IAChB,aAAa;IACb,SAAS;IACT,MAAM;AACV;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,qCAAqC;AACzC;AACA;IACI,oCAAoC;;AAExC;AACA;IACI,sCAAsC;AAC1C;;AAEA;IACI;QACI,YAAY;QACZ,gBAAgB;QAChB,qBAAqB;QACrB,kBAAkB;IACtB;AACJ",sourcesContent:[":root {\r\n    --low-priority: rgb(167, 238, 167);\r\n    --medium-priority: rgb(240, 220, 107);\r\n    --high-priority: rgb(247, 124, 120);\r\n}\r\n\r\n.details-window, .edit-window {\r\n    width: min(700px, 90vw);\r\n    min-height: 300px;\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%; \r\n    transform: translate(-50%, -50%) scale(1);\r\n    z-index: 20;\r\n    background: white;\r\n    border-radius: 5px;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transition: 0.3s;\r\n    opacity: 1;\r\n    animation: displayEnter 0.4s;\r\n    /* animation: altDisplayEnter 0.4s; */\r\n    /* will-change: transform, opacity; */\r\n}\r\n\r\n@keyframes displayEnter {\r\n    0% {\r\n        opacity: 0;\r\n        /* top: 40%; */\r\n        /* transform: translate(-50%, -50%) scale(1);  */\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n@keyframes altDisplayEnter {\r\n    0% {\r\n        opacity: 0;\r\n        /* top: 40%; */\r\n        /* transform: translate(-50%, -50%) scale(1);  */\r\n    }\r\n    2% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\nlabel {\r\n    /* background: khaki; */\r\n    width: 50%;\r\n}\r\n\r\n.details-window {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 20px;\r\n    background: var(--medium-priority);\r\n    top: 50%;\r\n    left: 50%; \r\n    transform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n/* .close-details-button {\r\n    position: relative;\r\n} */\r\n\r\n\r\n.details-window div:first-child {\r\n    display: flex;\r\n}\r\n\r\n.details-window div:nth-child(2) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 10px;\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\n.details-description {\r\n}\r\n\r\n\r\n.details-title {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    /* width: 200px; */\r\n    color:rgb(82, 116, 102);\r\n    text-decoration: underline;\r\n}\r\n.details-label {\r\n    font-size: 12px;\r\n    font-weight: bold;\r\n    opacity: 0.4;\r\n    position: absolute;\r\n    bottom: 10px;\r\n    right: 10px;\r\n}\r\n\r\n.details-priority {\r\n    /* border: 1px solid red; */\r\n    /* align-self: center; */\r\n    border-radius: 4px;\r\n    padding: 5px;\r\n    color: rgb(80, 80, 80);\r\n    background: yellow;\r\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\r\n}\r\n\r\n.priority-meter {\r\n    color: black;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 60px;\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n\r\n    \r\n    position: sticky;\r\n    z-index: 2000;\r\n    bottom: 0;\r\n    left:0;\r\n}\r\n\r\n.priority-meter > * {\r\n    padding-left: 4px;\r\n    border-radius: 3px;\r\n}\r\n\r\n.low {\r\n    background-color: var(--low-priority);\r\n}\r\n.medium {\r\n    background-color: rgb(240, 220, 107);\r\n\r\n}\r\n.high {\r\n    background-color: var(--high-priority);\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .details-window {\r\n        width: 100vw;\r\n        min-height: 50vh;\r\n        /* margin-top: 1vh; */\r\n        /* z-index: 200; */\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],sourceRoot:""}]);const A=i},865:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([n.id,".label-input {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n}\r\n\r\n.edit-label {\r\n    height: 30px;\r\n}\r\n\r\ntextarea {\r\n    resize: none;\r\n}\r\n\r\ninput, textarea, select {\r\n    padding: 5px;\r\n    border-radius: 5px;\r\n    border: 1px solid rgb(209, 209, 209);\r\n    /* border: none; */\r\n    height: 50px;\r\n}\r\n\r\n.edit-title-input {\r\n    display: grid;\r\n    place-items: center; \r\n}\r\n\r\n.editCreate-form {\r\n    /* min-height: 80%; */\r\n    width: 100%;\r\n    /* background: green; */\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 20px;\r\n} \r\n\r\n\r\n\r\n.submit-edit {\r\n    background: pink;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.editCreate-form > div:nth-child(2), .editCreate-form > div:first-child {\r\n    flex-direction: column;\r\n    display: flex;\r\n    gap: 20px;\r\n}\r\n\r\n.edit-details-input {\r\n    height: 100px;\r\n}\r\n\r\n.edit-window {\r\n    position: fixed;\r\n    width: min(700px, 90vw);\r\n    padding: 10px;\r\n    /* background: pink; */\r\n    background: whitesmoke;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    /* transform: translate(-50%, -50%) scale(1); */\r\n}\r\n\r\n.close-edit-button {\r\n    /* position: absolute;\r\n    top: 10px; */\r\n    background: none;\r\n    padding: 0;\r\n    top: 5px;\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .editCreate-form {\r\n        grid-template-columns: initial;\r\n        grid-template-rows: 1fr 1fr;\r\n        /* gap: 5px; */\r\n    } \r\n\r\n    .close-edit-button {\r\n        /* background: rgb(204, 204, 204); */\r\n        color: grey;\r\n        background: none;\r\n        position: fixed;\r\n        top: 40px;\r\n        top: 10vh;\r\n    }\r\n    .edit-window {\r\n        border-radius: 0;\r\n        width: min(700px, 100vw);\r\n        height: max(800px, calc(100vh - 45px));\r\n\r\n        z-index: 100;\r\n        /* top: calc(50% - 45px);\r\n        height: calc(100vh - 45px); */\r\n\r\n    }\r\n\r\n    input, textarea, select {\r\n        padding: 5px;\r\n        border-radius: 5px;\r\n        border: 1px solid rgb(209, 209, 209);\r\n        height: 30px;\r\n    }\r\n    .edit-title-input {\r\n        height: 50px;\r\n    }\r\n  }\r\n\r\n\r\n  ","",{version:3,sources:["webpack://./src/styles/editWindow.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,oCAAoC;IACpC,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,qBAAqB;IACrB,WAAW;IACX,uBAAuB;IACvB,aAAa;IACb,8BAA8B;IAC9B,SAAS;AACb;;;;AAIA;IACI,gBAAgB;IAChB,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,eAAe;IACf,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,SAAS;IACT,+CAA+C;AACnD;;AAEA;IACI;gBACY;IACZ,gBAAgB;IAChB,UAAU;IACV,QAAQ;AACZ;;AAEA;IACI;QACI,8BAA8B;QAC9B,2BAA2B;QAC3B,cAAc;IAClB;;IAEA;QACI,oCAAoC;QACpC,WAAW;QACX,gBAAgB;QAChB,eAAe;QACf,SAAS;QACT,SAAS;IACb;IACA;QACI,gBAAgB;QAChB,wBAAwB;QACxB,sCAAsC;;QAEtC,YAAY;QACZ;qCAC6B;;IAEjC;;IAEA;QACI,YAAY;QACZ,kBAAkB;QAClB,oCAAoC;QACpC,YAAY;IAChB;IACA;QACI,YAAY;IAChB;EACF",sourcesContent:[".label-input {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n}\r\n\r\n.edit-label {\r\n    height: 30px;\r\n}\r\n\r\ntextarea {\r\n    resize: none;\r\n}\r\n\r\ninput, textarea, select {\r\n    padding: 5px;\r\n    border-radius: 5px;\r\n    border: 1px solid rgb(209, 209, 209);\r\n    /* border: none; */\r\n    height: 50px;\r\n}\r\n\r\n.edit-title-input {\r\n    display: grid;\r\n    place-items: center; \r\n}\r\n\r\n.editCreate-form {\r\n    /* min-height: 80%; */\r\n    width: 100%;\r\n    /* background: green; */\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 20px;\r\n} \r\n\r\n\r\n\r\n.submit-edit {\r\n    background: pink;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.editCreate-form > div:nth-child(2), .editCreate-form > div:first-child {\r\n    flex-direction: column;\r\n    display: flex;\r\n    gap: 20px;\r\n}\r\n\r\n.edit-details-input {\r\n    height: 100px;\r\n}\r\n\r\n.edit-window {\r\n    position: fixed;\r\n    width: min(700px, 90vw);\r\n    padding: 10px;\r\n    /* background: pink; */\r\n    background: whitesmoke;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    /* transform: translate(-50%, -50%) scale(1); */\r\n}\r\n\r\n.close-edit-button {\r\n    /* position: absolute;\r\n    top: 10px; */\r\n    background: none;\r\n    padding: 0;\r\n    top: 5px;\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .editCreate-form {\r\n        grid-template-columns: initial;\r\n        grid-template-rows: 1fr 1fr;\r\n        /* gap: 5px; */\r\n    } \r\n\r\n    .close-edit-button {\r\n        /* background: rgb(204, 204, 204); */\r\n        color: grey;\r\n        background: none;\r\n        position: fixed;\r\n        top: 40px;\r\n        top: 10vh;\r\n    }\r\n    .edit-window {\r\n        border-radius: 0;\r\n        width: min(700px, 100vw);\r\n        height: max(800px, calc(100vh - 45px));\r\n\r\n        z-index: 100;\r\n        /* top: calc(50% - 45px);\r\n        height: calc(100vh - 45px); */\r\n\r\n    }\r\n\r\n    input, textarea, select {\r\n        padding: 5px;\r\n        border-radius: 5px;\r\n        border: 1px solid rgb(209, 209, 209);\r\n        height: 30px;\r\n    }\r\n    .edit-title-input {\r\n        height: 50px;\r\n    }\r\n  }\r\n\r\n\r\n  "],sourceRoot:""}]);const A=i},604:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([n.id,".select-project {\r\n    height: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    transition: 0.3s;\r\n    border-radius: 5px;\r\n    padding: 20px;\r\n    cursor: pointer;\r\n    width: 100%;\r\n}\r\n\r\n\r\n.select-project:hover, .select-container:hover {\r\n    background: #ebe9e9;\r\n}\r\n\r\n.project-selected, .container-selected {\r\n    background-color: #ebe9e9\r\n}\r\n\r\n.select-container {\r\n    /* background-color: rgb(245, 137, 137); */\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.number-of-tasks {\r\n    background-color: #ebe9e9;\r\n    display: grid;\r\n    place-items: center;\r\n\r\n    height: 25px;\r\n    aspect-ratio: 1/1;\r\n    border-radius: 50%;\r\n\r\n\r\n\r\n    color: grey;\r\n    font-size: 12px;\r\n}\r\n","",{version:3,sources:["webpack://./src/styles/projectSelect.css"],names:[],mappings:"AAAA;IACI,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,gBAAgB;IAChB,kBAAkB;IAClB,aAAa;IACb,eAAe;IACf,WAAW;AACf;;;AAGA;IACI,mBAAmB;AACvB;;AAEA;IACI;AACJ;;AAEA;IACI,0CAA0C;IAC1C,aAAa;IACb,mBAAmB;IACnB,8BAA8B;AAClC;;AAEA;IACI,yBAAyB;IACzB,aAAa;IACb,mBAAmB;;IAEnB,YAAY;IACZ,iBAAiB;IACjB,kBAAkB;;;;IAIlB,WAAW;IACX,eAAe;AACnB",sourcesContent:[".select-project {\r\n    height: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    transition: 0.3s;\r\n    border-radius: 5px;\r\n    padding: 20px;\r\n    cursor: pointer;\r\n    width: 100%;\r\n}\r\n\r\n\r\n.select-project:hover, .select-container:hover {\r\n    background: #ebe9e9;\r\n}\r\n\r\n.project-selected, .container-selected {\r\n    background-color: #ebe9e9\r\n}\r\n\r\n.select-container {\r\n    /* background-color: rgb(245, 137, 137); */\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n}\r\n\r\n.number-of-tasks {\r\n    background-color: #ebe9e9;\r\n    display: grid;\r\n    place-items: center;\r\n\r\n    height: 25px;\r\n    aspect-ratio: 1/1;\r\n    border-radius: 50%;\r\n\r\n\r\n\r\n    color: grey;\r\n    font-size: 12px;\r\n}\r\n"],sourceRoot:""}]);const A=i},211:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([n.id,".project-window {\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) scale(1);\r\n    z-index: 20;\r\n\r\n    background: #f5f5f5;\r\n    width: min(500px, 80vw);\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    transition: 0.4s;\r\n    animation: displayEnter 0.4s;\r\n}\r\n\r\n\r\n\r\n@keyframes displayEnter {\r\n    0% {\r\n        opacity: 0;\r\n        top: 40%;\r\n        transform: translate(-50%, -50%) scale(1); \r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n\r\n.project-window form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n}\r\n\r\n.project-window input {\r\n    height: 40px;\r\n}\r\n\r\n.project-window p {\r\n    font-size: 20px;\r\n    font-weight: bolder;\r\n}\r\n\r\n.project-window div:first-child {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px\r\n}\r\n\r\n.project-window  form div:first-child {\r\n    gap: 10px;\r\n}\r\n\r\nform div:nth-child(2) {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 10px;\r\n}\r\n\r\n/* .project-window  button {\r\n    \r\n} */\r\n\r\n.submit-project {\r\n    background: pink;\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .project-window {\r\n        z-index: 50;\r\n    }\r\n}\r\n","",{version:3,sources:["webpack://./src/styles/projectWindow.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,QAAQ;IACR,SAAS;IACT,yCAAyC;IACzC,WAAW;;IAEX,mBAAmB;IACnB,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,aAAa;IACb,mBAAmB;IACnB,gBAAgB;IAChB,4BAA4B;AAChC;;;;AAIA;IACI;QACI,UAAU;QACV,QAAQ;QACR,yCAAyC;IAC7C;IACA;QACI,UAAU;IACd;AACJ;;;AAGA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB;AACJ;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,aAAa;IACb,yBAAyB;IACzB,SAAS;AACb;;AAEA;;GAEG;;AAEH;IACI,gBAAgB;AACpB;;AAEA;IACI;QACI,WAAW;IACf;AACJ",sourcesContent:[".project-window {\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) scale(1);\r\n    z-index: 20;\r\n\r\n    background: #f5f5f5;\r\n    width: min(500px, 80vw);\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    transition: 0.4s;\r\n    animation: displayEnter 0.4s;\r\n}\r\n\r\n\r\n\r\n@keyframes displayEnter {\r\n    0% {\r\n        opacity: 0;\r\n        top: 40%;\r\n        transform: translate(-50%, -50%) scale(1); \r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n\r\n.project-window form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n}\r\n\r\n.project-window input {\r\n    height: 40px;\r\n}\r\n\r\n.project-window p {\r\n    font-size: 20px;\r\n    font-weight: bolder;\r\n}\r\n\r\n.project-window div:first-child {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px\r\n}\r\n\r\n.project-window  form div:first-child {\r\n    gap: 10px;\r\n}\r\n\r\nform div:nth-child(2) {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 10px;\r\n}\r\n\r\n/* .project-window  button {\r\n    \r\n} */\r\n\r\n.submit-project {\r\n    background: pink;\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .project-window {\r\n        z-index: 50;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const A=i},772:(n,r,e)=>{e.d(r,{Z:()=>C});var t=e(537),o=e.n(t),a=e(645),i=e.n(a),A=e(667),d=e.n(A),s=new URL(e(334),e.b),l=new URL(e(444),e.b),c=new URL(e(443),e.b),u=i()(o()),p=d()(s),g=d()(l),h=d()(c);u.push([n.id,':root {\r\n    --header-height: 50px;\r\n    --header-background: #db4c3f;;\r\n}\r\n\r\n:root.dark {\r\n    --header-background: black;\r\n    --header-color: white;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nh1,h2,h3,h4,h5,p,body, span {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n\r\nbody {\r\n    min-height: 100%;\r\n    width: 100vw;\r\n    background-color: rgb(255, 255, 255);\r\n    font-family: sans-serif;\r\n    overflow: hidden;\r\n    -ms-overflow-style: none;  /* IE and Edge */\r\n    scrollbar-width: none;  /* Firefox */\r\n}\r\n\r\nbody::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n\r\n\r\n  ::-webkit-scrollbar {\r\n      width: 5px;\r\n  }\r\n  \r\n   \r\n  ::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n    border-radius: 10px;\r\n  }\r\n   \r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: rgb(255, 255, 255);\r\n    border: 1px solid rgb(181, 214, 172);\r\n    border-radius: 10px;\r\n  }\r\n\r\n\r\n\r\n  /* Hide scrollbar for IE, Edge and Firefox */\r\n\r\n\r\nheader {\r\n    width: 100vw;\r\n    height: var(--header-height);\r\n    background-color: rgb(238, 238, 238);\r\n    background: rgb(176, 240, 151);\r\n    /* background: rgb(253, 155, 155); */\r\n    /* background: rgb(122, 122, 122); */\r\n    background: pink;\r\n    background: #db4c3f;\r\n    color: white;\r\n    padding: 0 35px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    position: fixed;\r\n    top: 0;\r\n    /* z-index: 50; */\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n    font-size: 18px;\r\n}\r\n\r\nh1 {\r\n    font-size: 18px;\r\n}\r\n\r\nheader div:nth-child(2) {\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\nnav {\r\n    position: fixed;\r\n    background: whitesmoke;\r\n    background-color: rgb(238, 238, 238);\r\n    background: #fafafa;\r\n    height: 100vh;\r\n    top: var(--header-height);\r\n    width: 250px;\r\n    left: 0;\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n    transition: 0.3s;\r\n    z-index: 0;\r\n\r\n    /* background-image: url("/src/images/To\\ do\\ list-amico-red.svg"); */\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n\r\n}\r\n\r\n/* .nav-top  {\r\n    gap: 5px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: sticky;\r\n    top: 0;\r\n    background-color: white;\r\n} */\r\n\r\nnav p {\r\n    font-size: 15px;\r\n    color: rgb(92, 92, 92);\r\n    font-weight: 100;\r\n}\r\n\r\n.nav-close {\r\n    left: -350px;\r\n}\r\n\r\n .content {\r\n    padding: 10px;\r\n    width: calc(100vw - 250px);\r\n    margin-left: 250px;\r\n    margin-top: var(--header-height);\r\n    height: calc(100vh - 36px);\r\n    /* min-height: 100vh; */\r\n    background: rgb(255, 253, 248);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 0px;\r\n    transition: 0.3s;\r\n    /* background: rgb(253, 249, 211); */\r\n    background-image: url('+p+");\r\n    background-image: url("+g+");\r\n    background-image: url("+h+");\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    background-size: 30%;\r\n    /* background-color: rgb(247, 105, 86); */\r\n    background-color: rgb(255, 255, 255);\r\n    /* background-color: rgb(253, 249, 211); */\r\n\r\n\r\n}\r\n\r\n\r\n\r\n/* .content::before {\r\n    content: ' ';\r\n    display: block;\r\n    position: fixed;\r\n    \r\n    margin-top: var(--header-height);\r\n    width: calc(100vw - 250px);\r\n    left: 250px;\r\n\r\n    top: 0;\r\n    right: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    opacity: 0.5;\r\n    background-image: url(\"/src/images/To\\ do\\ list-pana.svg\");\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    background-size: 30%;\r\n    background-color: blue;\r\n  } */\r\n\r\n\r\n\r\n.content  * {\r\n    position: relative;\r\n}\r\n\r\n.content > div:first-child {\r\n    background-color: blueviolet;\r\n}\r\n\r\n.content-top {\r\n    background-color: brown;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    /* align-self: flex-start; */\r\n    justify-self: flex-start;\r\n    width: 84%;\r\n    width: 42%;\r\n\r\n    max-width: 70vw;\r\n}\r\n\r\n.project-label {\r\n    font-size: 26px;\r\n    /* width: 84%; */\r\n    /* max-width: 67vw; */\r\n    font-weight: 700;\r\n    color: black;\r\n}\r\n\r\n\r\n.content-first {\r\n    width: 96vw;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 84%;\r\n    max-width: 67vw;\r\n    font-weight: 700;\r\n    color: black;\r\n\r\n    font-size: 12px;\r\n    align-items:flex-end; \r\n}\r\n\r\n\r\n.current-date-time {\r\n    color: var(--header-background);\r\n    color: grey;\r\n}\r\n\r\n.content-expand {\r\n    width: 100vw;\r\n    margin-left: 0;\r\n}\r\n\r\n.todo-content {\r\n    width: 95%;\r\n    max-width: 70vw;\r\n    height: 90%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 10px;\r\n    padding: 2px 0;\r\n    overflow-y: scroll;\r\n    /* margin-bottom: 5px; */\r\n    /* background: rgb(245, 245, 245); */\r\n}\r\n\r\n.attrib {\r\n    position: fixed;\r\n    bottom: 0;\r\n    color: rgba(0, 0, 0, 0.733);\r\n    font-size: 10px;\r\n}\r\n\r\n.header-date, .header-time {\r\n    font-size: 10px;\r\n    font-weight: 800;\r\n    color:rgb(110, 110, 110);\r\n}\r\n\r\n.overlay {\r\n    backdrop-filter: blur(1px);\r\n    background-color: rgba(0, 10, 26, 0.637);\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    bottom: 0;\r\n    right: 0;\r\n    /* transition: 0.3s; */\r\n    z-index: 10;\r\n    animation: closeOverlay 0.3s;    \r\n}\r\n\r\n\r\n.overlay-display-none {\r\n   height: 0;\r\n   width: 0;\r\n   animation: overlayExit 0.05s;\r\n   opacity: 0;\r\n}\r\n\r\n@keyframes overlayExit {\r\n    0% {\r\n        opacity: 1;\r\n        width: 100vw;\r\n        height: 100vh;\r\n    }\r\n\r\n    99% {\r\n        width: 100vw;\r\n        height: 100vh;  \r\n        opacity: 0;\r\n    }\r\n    100% {     \r\n        height: 0;\r\n        width: 0;\r\n    }\r\n}\r\n\r\n\r\n@keyframes closeOverlay {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    1% {\r\n        bottom: 0;\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n         opacity: 1;\r\n    }\r\n }\r\n\r\n\r\n\r\n.display-none {\r\n    position: fixed;\r\n    top: 40%;\r\n    transition: 0.4s;\r\n    opacity: 0;\r\n    animation: displayExit 0.4s; \r\n    transform:  scaleY(0);\r\n\r\n\r\n    top: 35%;\r\n}\r\n\r\n@keyframes displayExit {\r\n    0% {\r\n         transform: translate(-50%, -50%) scaleY(1);\r\n         opacity: 1;\r\n    }\r\n    70% {\r\n        opacity: 0;\r\n    }\r\n    99% {\r\n        transform: translate(-50%, -50%) scaleY(1);\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        transform: translate(-50%, -50%) scaleY(0); \r\n    }\r\n}\r\n\r\n\r\n.filter-blur {\r\n    filter: blur(1px);\r\n}\r\n\r\nhr {\r\n    width: 100%;\r\n}\r\n\r\n.projects {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.projects > div:first-child {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding-left: 20px;\r\n}\r\n\r\n.projects > div:first-child {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.project-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1px;\r\n    overflow-y: scroll;\r\n    /* background-color: bisque; */\r\n    height: 65vh;\r\n}\r\n\r\n\r\n\r\n/* .select-project {\r\n    height: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    transition: 0.3s;\r\n    border-radius: 5px;\r\n    padding: 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n.select-project:hover {\r\n    background: #ebe9e9;\r\n}\r\n\r\n.project-selected {\r\n    background-color: #ebe9e9\r\n} */\r\n\r\n\r\n@media only screen and (max-width: 500px) {\r\n    :root {\r\n        --header-height: 40px;\r\n    }\r\n    .todo-content {\r\n        max-width: unset;\r\n    }\r\n    .content {\r\n        width: 100vw;\r\n        \r\n        margin-left: 0;\r\n        padding-left: 0;\r\n        padding-right: 0;\r\n        background-color: rgb(255, 246, 246);\r\n        background-size: 70%;\r\n        background-image: none;\r\n    }\r\n\r\n    .project-label {\r\n        font-size: 20px;\r\n    }\r\n    .content-first {\r\n        max-width: initial;\r\n        width: 96vw;\r\n        overflow: hidden;\r\n        white-space: nowrap;    \r\n    }\r\n\r\n    .content::before {\r\n        content: ' ';\r\n        display: block;\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        opacity: 0.6;\r\n        background-image: url("+h+');\r\n        /* background-image: url("/src/images/To\\ do\\ list-amico-pink.svg"); */\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        background-size: 70%;\r\n      }\r\n\r\n    nav {\r\n        width: 250px;\r\n        /* width: 70vw; */\r\n        z-index: 40;\r\n    }\r\n    header {\r\n        padding-left: 0px;\r\n        padding-right: 5px;\r\n        z-index: 40;\r\n    }\r\n\r\n    .details-button {\r\n        display: none;\r\n    }\r\n  }\r\n\r\n\r\n',"",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;IACI,qBAAqB;IACrB,4BAA4B;AAChC;;AAEA;IACI,0BAA0B;IAC1B,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,SAAS;IACT,UAAU;AACd;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;;AAGA;IACI,gBAAgB;IAChB,YAAY;IACZ,oCAAoC;IACpC,uBAAuB;IACvB,gBAAgB;IAChB,wBAAwB,GAAG,gBAAgB;IAC3C,qBAAqB,GAAG,YAAY;AACxC;;AAEA;IACI,aAAa;EACf;;;EAGA;MACI,UAAU;EACd;;;EAGA;IACE,4CAA4C;IAC5C,mBAAmB;EACrB;;EAEA;IACE,oCAAoC;IACpC,oCAAoC;IACpC,mBAAmB;EACrB;;;;EAIA,4CAA4C;;;AAG9C;IACI,YAAY;IACZ,4BAA4B;IAC5B,oCAAoC;IACpC,8BAA8B;IAC9B,oCAAoC;IACpC,oCAAoC;IACpC,gBAAgB;IAChB,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,eAAe;IACf,MAAM;IACN,iBAAiB;IACjB,2CAA2C;IAC3C,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,eAAe;IACf,sBAAsB;IACtB,oCAAoC;IACpC,mBAAmB;IACnB,aAAa;IACb,yBAAyB;IACzB,YAAY;IACZ,OAAO;IACP,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,2CAA2C;IAC3C,gBAAgB;IAChB,UAAU;;IAEV,qEAAqE;IACrE,4BAA4B;IAC5B,2BAA2B;;AAE/B;;AAEA;;;;;;;GAOG;;AAEH;IACI,eAAe;IACf,sBAAsB;IACtB,gBAAgB;AACpB;;AAEA;IACI,YAAY;AAChB;;CAEC;IACG,aAAa;IACb,0BAA0B;IAC1B,kBAAkB;IAClB,gCAAgC;IAChC,0BAA0B;IAC1B,uBAAuB;IACvB,8BAA8B;IAC9B,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,QAAQ;IACR,gBAAgB;IAChB,oCAAoC;IACpC,yDAA+D;IAC/D,yDAAgE;IAChE,yDAA0D;IAC1D,4BAA4B;IAC5B,2BAA2B;IAC3B,oBAAoB;IACpB,yCAAyC;IACzC,oCAAoC;IACpC,0CAA0C;;;AAG9C;;;;AAIA;;;;;;;;;;;;;;;;;;;KAmBK;;;;AAIL;IACI,kBAAkB;AACtB;;AAEA;IACI,4BAA4B;AAChC;;AAEA;IACI,uBAAuB;IACvB,aAAa;IACb,mBAAmB;IACnB,8BAA8B;IAC9B,4BAA4B;IAC5B,wBAAwB;IACxB,UAAU;IACV,UAAU;;IAEV,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,qBAAqB;IACrB,gBAAgB;IAChB,YAAY;AAChB;;;AAGA;IACI,WAAW;IACX,aAAa;IACb,8BAA8B;IAC9B,UAAU;IACV,eAAe;IACf,gBAAgB;IAChB,YAAY;;IAEZ,eAAe;IACf,oBAAoB;AACxB;;;AAGA;IACI,+BAA+B;IAC/B,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,UAAU;IACV,eAAe;IACf,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;IACT,cAAc;IACd,kBAAkB;IAClB,wBAAwB;IACxB,oCAAoC;AACxC;;AAEA;IACI,eAAe;IACf,SAAS;IACT,2BAA2B;IAC3B,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,wBAAwB;AAC5B;;AAEA;IACI,0BAA0B;IAC1B,wCAAwC;IACxC,eAAe;IACf,MAAM;IACN,OAAO;IACP,YAAY;IACZ,aAAa;IACb,SAAS;IACT,QAAQ;IACR,sBAAsB;IACtB,WAAW;IACX,4BAA4B;AAChC;;;AAGA;GACG,SAAS;GACT,QAAQ;GACR,4BAA4B;GAC5B,UAAU;AACb;;AAEA;IACI;QACI,UAAU;QACV,YAAY;QACZ,aAAa;IACjB;;IAEA;QACI,YAAY;QACZ,aAAa;QACb,UAAU;IACd;IACA;QACI,SAAS;QACT,QAAQ;IACZ;AACJ;;;AAGA;IACI;QACI,UAAU;IACd;IACA;QACI,SAAS;QACT,UAAU;IACd;IACA;SACK,UAAU;IACf;CACH;;;;AAID;IACI,eAAe;IACf,QAAQ;IACR,gBAAgB;IAChB,UAAU;IACV,2BAA2B;IAC3B,qBAAqB;;;IAGrB,QAAQ;AACZ;;AAEA;IACI;SACK,0CAA0C;SAC1C,UAAU;IACf;IACA;QACI,UAAU;IACd;IACA;QACI,0CAA0C;QAC1C,UAAU;IACd;IACA;QACI,0CAA0C;IAC9C;AACJ;;;AAGA;IACI,iBAAiB;AACrB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,kBAAkB;IAClB,8BAA8B;IAC9B,YAAY;AAChB;;;;AAIA;;;;;;;;;;;;;;;;;GAiBG;;;AAGH;IACI;QACI,qBAAqB;IACzB;IACA;QACI,gBAAgB;IACpB;IACA;QACI,YAAY;;QAEZ,cAAc;QACd,eAAe;QACf,gBAAgB;QAChB,oCAAoC;QACpC,oBAAoB;QACpB,sBAAsB;IAC1B;;IAEA;QACI,eAAe;IACnB;IACA;QACI,kBAAkB;QAClB,WAAW;QACX,gBAAgB;QAChB,mBAAmB;IACvB;;IAEA;QACI,YAAY;QACZ,cAAc;QACd,kBAAkB;QAClB,OAAO;QACP,MAAM;QACN,WAAW;QACX,YAAY;QACZ,YAAY;QACZ,yDAA0D;QAC1D,sEAAsE;QACtE,4BAA4B;QAC5B,2BAA2B;QAC3B,oBAAoB;MACtB;;IAEF;QACI,YAAY;QACZ,iBAAiB;QACjB,WAAW;IACf;IACA;QACI,iBAAiB;QACjB,kBAAkB;QAClB,WAAW;IACf;;IAEA;QACI,aAAa;IACjB;EACF",sourcesContent:[':root {\r\n    --header-height: 50px;\r\n    --header-background: #db4c3f;;\r\n}\r\n\r\n:root.dark {\r\n    --header-background: black;\r\n    --header-color: white;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nh1,h2,h3,h4,h5,p,body, span {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n\r\nbody {\r\n    min-height: 100%;\r\n    width: 100vw;\r\n    background-color: rgb(255, 255, 255);\r\n    font-family: sans-serif;\r\n    overflow: hidden;\r\n    -ms-overflow-style: none;  /* IE and Edge */\r\n    scrollbar-width: none;  /* Firefox */\r\n}\r\n\r\nbody::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n\r\n\r\n  ::-webkit-scrollbar {\r\n      width: 5px;\r\n  }\r\n  \r\n   \r\n  ::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n    border-radius: 10px;\r\n  }\r\n   \r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: rgb(255, 255, 255);\r\n    border: 1px solid rgb(181, 214, 172);\r\n    border-radius: 10px;\r\n  }\r\n\r\n\r\n\r\n  /* Hide scrollbar for IE, Edge and Firefox */\r\n\r\n\r\nheader {\r\n    width: 100vw;\r\n    height: var(--header-height);\r\n    background-color: rgb(238, 238, 238);\r\n    background: rgb(176, 240, 151);\r\n    /* background: rgb(253, 155, 155); */\r\n    /* background: rgb(122, 122, 122); */\r\n    background: pink;\r\n    background: #db4c3f;\r\n    color: white;\r\n    padding: 0 35px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    position: fixed;\r\n    top: 0;\r\n    /* z-index: 50; */\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n    font-size: 18px;\r\n}\r\n\r\nh1 {\r\n    font-size: 18px;\r\n}\r\n\r\nheader div:nth-child(2) {\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\nnav {\r\n    position: fixed;\r\n    background: whitesmoke;\r\n    background-color: rgb(238, 238, 238);\r\n    background: #fafafa;\r\n    height: 100vh;\r\n    top: var(--header-height);\r\n    width: 250px;\r\n    left: 0;\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n    transition: 0.3s;\r\n    z-index: 0;\r\n\r\n    /* background-image: url("/src/images/To\\ do\\ list-amico-red.svg"); */\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n\r\n}\r\n\r\n/* .nav-top  {\r\n    gap: 5px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    position: sticky;\r\n    top: 0;\r\n    background-color: white;\r\n} */\r\n\r\nnav p {\r\n    font-size: 15px;\r\n    color: rgb(92, 92, 92);\r\n    font-weight: 100;\r\n}\r\n\r\n.nav-close {\r\n    left: -350px;\r\n}\r\n\r\n .content {\r\n    padding: 10px;\r\n    width: calc(100vw - 250px);\r\n    margin-left: 250px;\r\n    margin-top: var(--header-height);\r\n    height: calc(100vh - 36px);\r\n    /* min-height: 100vh; */\r\n    background: rgb(255, 253, 248);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 0px;\r\n    transition: 0.3s;\r\n    /* background: rgb(253, 249, 211); */\r\n    background-image: url("/src/images/To\\ do\\ list-amico-red.svg");\r\n    background-image: url("/src/images/To\\ do\\ list-amico-grey.svg");\r\n    background-image: url("/src/images/To\\ do\\ list-pana.svg");\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    background-size: 30%;\r\n    /* background-color: rgb(247, 105, 86); */\r\n    background-color: rgb(255, 255, 255);\r\n    /* background-color: rgb(253, 249, 211); */\r\n\r\n\r\n}\r\n\r\n\r\n\r\n/* .content::before {\r\n    content: \' \';\r\n    display: block;\r\n    position: fixed;\r\n    \r\n    margin-top: var(--header-height);\r\n    width: calc(100vw - 250px);\r\n    left: 250px;\r\n\r\n    top: 0;\r\n    right: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    opacity: 0.5;\r\n    background-image: url("/src/images/To\\ do\\ list-pana.svg");\r\n    background-repeat: no-repeat;\r\n    background-position: center;\r\n    background-size: 30%;\r\n    background-color: blue;\r\n  } */\r\n\r\n\r\n\r\n.content  * {\r\n    position: relative;\r\n}\r\n\r\n.content > div:first-child {\r\n    background-color: blueviolet;\r\n}\r\n\r\n.content-top {\r\n    background-color: brown;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: space-between;\r\n    /* align-self: flex-start; */\r\n    justify-self: flex-start;\r\n    width: 84%;\r\n    width: 42%;\r\n\r\n    max-width: 70vw;\r\n}\r\n\r\n.project-label {\r\n    font-size: 26px;\r\n    /* width: 84%; */\r\n    /* max-width: 67vw; */\r\n    font-weight: 700;\r\n    color: black;\r\n}\r\n\r\n\r\n.content-first {\r\n    width: 96vw;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    width: 84%;\r\n    max-width: 67vw;\r\n    font-weight: 700;\r\n    color: black;\r\n\r\n    font-size: 12px;\r\n    align-items:flex-end; \r\n}\r\n\r\n\r\n.current-date-time {\r\n    color: var(--header-background);\r\n    color: grey;\r\n}\r\n\r\n.content-expand {\r\n    width: 100vw;\r\n    margin-left: 0;\r\n}\r\n\r\n.todo-content {\r\n    width: 95%;\r\n    max-width: 70vw;\r\n    height: 90%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 10px;\r\n    padding: 2px 0;\r\n    overflow-y: scroll;\r\n    /* margin-bottom: 5px; */\r\n    /* background: rgb(245, 245, 245); */\r\n}\r\n\r\n.attrib {\r\n    position: fixed;\r\n    bottom: 0;\r\n    color: rgba(0, 0, 0, 0.733);\r\n    font-size: 10px;\r\n}\r\n\r\n.header-date, .header-time {\r\n    font-size: 10px;\r\n    font-weight: 800;\r\n    color:rgb(110, 110, 110);\r\n}\r\n\r\n.overlay {\r\n    backdrop-filter: blur(1px);\r\n    background-color: rgba(0, 10, 26, 0.637);\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    bottom: 0;\r\n    right: 0;\r\n    /* transition: 0.3s; */\r\n    z-index: 10;\r\n    animation: closeOverlay 0.3s;    \r\n}\r\n\r\n\r\n.overlay-display-none {\r\n   height: 0;\r\n   width: 0;\r\n   animation: overlayExit 0.05s;\r\n   opacity: 0;\r\n}\r\n\r\n@keyframes overlayExit {\r\n    0% {\r\n        opacity: 1;\r\n        width: 100vw;\r\n        height: 100vh;\r\n    }\r\n\r\n    99% {\r\n        width: 100vw;\r\n        height: 100vh;  \r\n        opacity: 0;\r\n    }\r\n    100% {     \r\n        height: 0;\r\n        width: 0;\r\n    }\r\n}\r\n\r\n\r\n@keyframes closeOverlay {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    1% {\r\n        bottom: 0;\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n         opacity: 1;\r\n    }\r\n }\r\n\r\n\r\n\r\n.display-none {\r\n    position: fixed;\r\n    top: 40%;\r\n    transition: 0.4s;\r\n    opacity: 0;\r\n    animation: displayExit 0.4s; \r\n    transform:  scaleY(0);\r\n\r\n\r\n    top: 35%;\r\n}\r\n\r\n@keyframes displayExit {\r\n    0% {\r\n         transform: translate(-50%, -50%) scaleY(1);\r\n         opacity: 1;\r\n    }\r\n    70% {\r\n        opacity: 0;\r\n    }\r\n    99% {\r\n        transform: translate(-50%, -50%) scaleY(1);\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        transform: translate(-50%, -50%) scaleY(0); \r\n    }\r\n}\r\n\r\n\r\n.filter-blur {\r\n    filter: blur(1px);\r\n}\r\n\r\nhr {\r\n    width: 100%;\r\n}\r\n\r\n.projects {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.projects > div:first-child {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding-left: 20px;\r\n}\r\n\r\n.projects > div:first-child {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.project-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1px;\r\n    overflow-y: scroll;\r\n    /* background-color: bisque; */\r\n    height: 65vh;\r\n}\r\n\r\n\r\n\r\n/* .select-project {\r\n    height: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    transition: 0.3s;\r\n    border-radius: 5px;\r\n    padding: 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n.select-project:hover {\r\n    background: #ebe9e9;\r\n}\r\n\r\n.project-selected {\r\n    background-color: #ebe9e9\r\n} */\r\n\r\n\r\n@media only screen and (max-width: 500px) {\r\n    :root {\r\n        --header-height: 40px;\r\n    }\r\n    .todo-content {\r\n        max-width: unset;\r\n    }\r\n    .content {\r\n        width: 100vw;\r\n        \r\n        margin-left: 0;\r\n        padding-left: 0;\r\n        padding-right: 0;\r\n        background-color: rgb(255, 246, 246);\r\n        background-size: 70%;\r\n        background-image: none;\r\n    }\r\n\r\n    .project-label {\r\n        font-size: 20px;\r\n    }\r\n    .content-first {\r\n        max-width: initial;\r\n        width: 96vw;\r\n        overflow: hidden;\r\n        white-space: nowrap;    \r\n    }\r\n\r\n    .content::before {\r\n        content: \' \';\r\n        display: block;\r\n        position: absolute;\r\n        left: 0;\r\n        top: 0;\r\n        width: 100%;\r\n        height: 100%;\r\n        opacity: 0.6;\r\n        background-image: url("/src/images/To\\ do\\ list-pana.svg");\r\n        /* background-image: url("/src/images/To\\ do\\ list-amico-pink.svg"); */\r\n        background-repeat: no-repeat;\r\n        background-position: center;\r\n        background-size: 70%;\r\n      }\r\n\r\n    nav {\r\n        width: 250px;\r\n        /* width: 70vw; */\r\n        z-index: 40;\r\n    }\r\n    header {\r\n        padding-left: 0px;\r\n        padding-right: 5px;\r\n        z-index: 40;\r\n    }\r\n\r\n    .details-button {\r\n        display: none;\r\n    }\r\n  }\r\n\r\n\r\n'],sourceRoot:""}]);const C=u},430:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),o=e.n(t),a=e(645),i=e.n(a)()(o());i.push([n.id,".todo-item {\r\n    transition: 0.2s;\r\n    font-weight: 200;\r\n    width: 95%;\r\n    height: 40px;\r\n    border-radius: 5px;\r\n    padding: 10px;\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n    display: grid;\r\n    grid-template-columns: 4fr 1fr;\r\n    align-content: center;\r\n    cursor: pointer;\r\n    \r\n    /* vertical-align: middle; */\r\n    /* background-color: rgba(137, 210, 252, 0.856); */\r\n    background-color: rgba(255, 255, 255, 0.829);\r\n\r\n\r\n    /* border-left: 5px solid rgb(55, 248, 55); */\r\n}\r\n\r\n.low-priority {\r\n    border-left: 5px solid rgb(55, 248, 55);\r\n\r\n\r\n    /* background-color: rgb(55, 248, 55); */\r\n}\r\n\r\n.medium-priority {\r\n    border-left: 5px solid rgb(245, 248, 55);\r\n    border-left: 5px solid rgb(177, 180, 7);\r\n\r\n    /* background-color:  rgb(177, 180, 7); */\r\n}\r\n\r\n.high-priority{\r\n    border-left: 5px solid rgb(248, 55, 55);\r\n\r\n    /* background-color:  rgb(248, 55, 55); */\r\n}\r\n\r\n\r\n.todo-item:hover {\r\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.todo-item div {\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n}\r\n\r\n\r\n\r\n.todo-item div:nth-child(2) {\r\n    gap: 10px;\r\n}\r\n\r\n.date {\r\n    font-size: 10px;\r\n    color: #db4c3f;\r\n}\r\n\r\n.task-complete {\r\n\r\n}\r\n\r\n\r\n.add-task {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 5px;\r\n    /* align-self: flex-start; */\r\n    color: grey;\r\n}\r\n\r\n.add-task:hover {\r\n    color: #db4c3f;\r\n    background: initial;\r\n}\r\n\r\n\r\n.title {\r\n    /* background: blanchedalmond; */\r\n    font-weight: 600;\r\n    width: 100%;\r\n    height: 76%;\r\n\r\n    vertical-align: middle;\r\n    white-space: nowrap; \r\n    overflow: hidden;\r\n    text-overflow: ellipsis; \r\n    display: inline-block;\r\n    /* padding: 14px 0; */\r\n}\r\n\r\n.title:before {\r\n    content: '';\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    height: 100%;\r\n  }\r\n\r\n.edit-button {\r\n    height: 20px;\r\n}\r\n\r\n.edit-button:hover {\r\n    /* background: #ebe9e9; */\r\n   \r\n}\r\n\r\n.details-button {\r\n    /* background-color: blue; */\r\n    /* z-index: 20; */\r\n}\r\n\r\n\r\n.title-complete {\r\n    text-decoration: line-through;\r\n}\r\n.todo-complete {\r\n    opacity: 0.4;\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .todo-item div:nth-child(2) {\r\n        gap: 5px;\r\n    }\r\n    .title {\r\n        width: 100%;\r\n        height: 100%;\r\n        /* max-width: calc(45vw - 1px); */\r\n        width: 230px;\r\n        max-width: 230px;\r\n        /* background-color: khaki; */\r\n    }\r\n    .todo {\r\n        /* background-color: blue; */\r\n    }\r\n\r\n    .todo-item {\r\n        width: 100%;\r\n        font-size: 13px;\r\n        background: rgba(253, 249, 211, 0.836);\r\n    }\r\n\r\n\r\n    /* .todo-complete {\r\n        background-color: grey;\r\n    } */\r\n    \r\n  }\r\n\r\n@media only screen and (max-width: 391px) {\r\n    .title {\r\n        height: 100%;\r\n        width: calc(48vw - 1px);\r\n        max-width: calc(48vw - 1px);\r\n        /* background-color: khaki; */\r\n    }\r\n}","",{version:3,sources:["webpack://./src/styles/taskComponent.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,gBAAgB;IAChB,UAAU;IACV,YAAY;IACZ,kBAAkB;IAClB,aAAa;IACb,2CAA2C;IAC3C,aAAa;IACb,8BAA8B;IAC9B,qBAAqB;IACrB,eAAe;;IAEf,4BAA4B;IAC5B,kDAAkD;IAClD,4CAA4C;;;IAG5C,6CAA6C;AACjD;;AAEA;IACI,uCAAuC;;;IAGvC,wCAAwC;AAC5C;;AAEA;IACI,wCAAwC;IACxC,uCAAuC;;IAEvC,yCAAyC;AAC7C;;AAEA;IACI,uCAAuC;;IAEvC,yCAAyC;AAC7C;;;AAGA;IACI,2CAA2C;IAC3C,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,mBAAmB;AACvB;;;;AAIA;IACI,SAAS;AACb;;AAEA;IACI,eAAe;IACf,cAAc;AAClB;;AAEA;;AAEA;;;AAGA;IACI,aAAa;IACb,mBAAmB;IACnB,QAAQ;IACR,4BAA4B;IAC5B,WAAW;AACf;;AAEA;IACI,cAAc;IACd,mBAAmB;AACvB;;;AAGA;IACI,gCAAgC;IAChC,gBAAgB;IAChB,WAAW;IACX,WAAW;;IAEX,sBAAsB;IACtB,mBAAmB;IACnB,gBAAgB;IAChB,uBAAuB;IACvB,qBAAqB;IACrB,qBAAqB;AACzB;;AAEA;IACI,WAAW;IACX,qBAAqB;IACrB,sBAAsB;IACtB,YAAY;EACd;;AAEF;IACI,YAAY;AAChB;;AAEA;IACI,yBAAyB;;AAE7B;;AAEA;IACI,4BAA4B;IAC5B,iBAAiB;AACrB;;;AAGA;IACI,6BAA6B;AACjC;AACA;IACI,YAAY;AAChB;;AAEA;IACI;QACI,QAAQ;IACZ;IACA;QACI,WAAW;QACX,YAAY;QACZ,iCAAiC;QACjC,YAAY;QACZ,gBAAgB;QAChB,6BAA6B;IACjC;IACA;QACI,4BAA4B;IAChC;;IAEA;QACI,WAAW;QACX,eAAe;QACf,sCAAsC;IAC1C;;;IAGA;;OAEG;;EAEL;;AAEF;IACI;QACI,YAAY;QACZ,uBAAuB;QACvB,2BAA2B;QAC3B,6BAA6B;IACjC;AACJ",sourcesContent:[".todo-item {\r\n    transition: 0.2s;\r\n    font-weight: 200;\r\n    width: 95%;\r\n    height: 40px;\r\n    border-radius: 5px;\r\n    padding: 10px;\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n    display: grid;\r\n    grid-template-columns: 4fr 1fr;\r\n    align-content: center;\r\n    cursor: pointer;\r\n    \r\n    /* vertical-align: middle; */\r\n    /* background-color: rgba(137, 210, 252, 0.856); */\r\n    background-color: rgba(255, 255, 255, 0.829);\r\n\r\n\r\n    /* border-left: 5px solid rgb(55, 248, 55); */\r\n}\r\n\r\n.low-priority {\r\n    border-left: 5px solid rgb(55, 248, 55);\r\n\r\n\r\n    /* background-color: rgb(55, 248, 55); */\r\n}\r\n\r\n.medium-priority {\r\n    border-left: 5px solid rgb(245, 248, 55);\r\n    border-left: 5px solid rgb(177, 180, 7);\r\n\r\n    /* background-color:  rgb(177, 180, 7); */\r\n}\r\n\r\n.high-priority{\r\n    border-left: 5px solid rgb(248, 55, 55);\r\n\r\n    /* background-color:  rgb(248, 55, 55); */\r\n}\r\n\r\n\r\n.todo-item:hover {\r\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.todo-item div {\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n}\r\n\r\n\r\n\r\n.todo-item div:nth-child(2) {\r\n    gap: 10px;\r\n}\r\n\r\n.date {\r\n    font-size: 10px;\r\n    color: #db4c3f;\r\n}\r\n\r\n.task-complete {\r\n\r\n}\r\n\r\n\r\n.add-task {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 5px;\r\n    /* align-self: flex-start; */\r\n    color: grey;\r\n}\r\n\r\n.add-task:hover {\r\n    color: #db4c3f;\r\n    background: initial;\r\n}\r\n\r\n\r\n.title {\r\n    /* background: blanchedalmond; */\r\n    font-weight: 600;\r\n    width: 100%;\r\n    height: 76%;\r\n\r\n    vertical-align: middle;\r\n    white-space: nowrap; \r\n    overflow: hidden;\r\n    text-overflow: ellipsis; \r\n    display: inline-block;\r\n    /* padding: 14px 0; */\r\n}\r\n\r\n.title:before {\r\n    content: '';\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n    height: 100%;\r\n  }\r\n\r\n.edit-button {\r\n    height: 20px;\r\n}\r\n\r\n.edit-button:hover {\r\n    /* background: #ebe9e9; */\r\n   \r\n}\r\n\r\n.details-button {\r\n    /* background-color: blue; */\r\n    /* z-index: 20; */\r\n}\r\n\r\n\r\n.title-complete {\r\n    text-decoration: line-through;\r\n}\r\n.todo-complete {\r\n    opacity: 0.4;\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .todo-item div:nth-child(2) {\r\n        gap: 5px;\r\n    }\r\n    .title {\r\n        width: 100%;\r\n        height: 100%;\r\n        /* max-width: calc(45vw - 1px); */\r\n        width: 230px;\r\n        max-width: 230px;\r\n        /* background-color: khaki; */\r\n    }\r\n    .todo {\r\n        /* background-color: blue; */\r\n    }\r\n\r\n    .todo-item {\r\n        width: 100%;\r\n        font-size: 13px;\r\n        background: rgba(253, 249, 211, 0.836);\r\n    }\r\n\r\n\r\n    /* .todo-complete {\r\n        background-color: grey;\r\n    } */\r\n    \r\n  }\r\n\r\n@media only screen and (max-width: 391px) {\r\n    .title {\r\n        height: 100%;\r\n        width: calc(48vw - 1px);\r\n        max-width: calc(48vw - 1px);\r\n        /* background-color: khaki; */\r\n    }\r\n}"],sourceRoot:""}]);const A=i},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(t)for(var A=0;A<this.length;A++){var d=this[A][0];null!=d&&(i[d]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);t&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),r.push(l))}},r}},667:n=>{n.exports=function(n,r){return r||(r={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),r.hash&&(n+=r.hash),/["'() \t\n]|(%20)/.test(n)||r.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},537:n=>{n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),i=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[r].concat(i).concat([a]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var a={},i=[],A=0;A<n.length;A++){var d=n[A],s=t.base?d[0]+t.base:d[0],l=a[s]||0,c="".concat(s," ").concat(l);a[s]=l+1;var u=e(c),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)r[u].references++,r[u].updater(p);else{var g=o(p,t);t.byIndex=A,r.splice(A,0,{identifier:c,updater:g,references:1})}i.push(c)}return i}function o(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var A=e(a[i]);r[A].references--}for(var d=t(n,o),s=0;s<a.length;s++){var l=e(a[s]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}a=d}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var a=e.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}},444:(n,r,e)=>{n.exports=e.p+"92e373d4a1ea77c907b5.svg"},334:(n,r,e)=>{n.exports=e.p+"3c44de79d647c478811a.svg"},443:(n,r,e)=>{n.exports=e.p+"cc56e27c015649568709.svg"}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var a=r[t]={id:t,exports:{}};return n[t](a,a.exports,e),a.exports}e.m=n,e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var r=e.g.document;if(!n&&r&&(r.currentScript&&(n=r.currentScript.src),!n)){var t=r.getElementsByTagName("script");t.length&&(n=t[t.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.b=document.baseURI||self.location.href,e.nc=void 0;var t={};(()=>{function n(n,r){if(r.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+r.length+" present")}function r(r){return n(1,arguments),r instanceof Date||"object"==typeof r&&"[object Date]"===Object.prototype.toString.call(r)}function o(r){n(1,arguments);var e=Object.prototype.toString.call(r);return r instanceof Date||"object"==typeof r&&"[object Date]"===e?new Date(r.getTime()):"number"==typeof r||"[object Number]"===e?new Date(r):("string"!=typeof r&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function a(e){if(n(1,arguments),!r(e)&&"number"!=typeof e)return!1;var t=o(e);return!isNaN(Number(t))}function i(n){if(null===n||!0===n||!1===n)return NaN;var r=Number(n);return isNaN(r)?r:r<0?Math.ceil(r):Math.floor(r)}function A(r,e){n(2,arguments);var t=o(r).getTime(),a=i(e);return new Date(t+a)}function d(r,e){n(2,arguments);var t=i(e);return A(r,-t)}e.d(t,{MP:()=>Ur,Mj:()=>jr,xJ:()=>Dr,FK:()=>Tr});var s=864e5;function l(r){n(1,arguments);var e=1,t=o(r),a=t.getUTCDay(),i=(a<e?7:0)+a-e;return t.setUTCDate(t.getUTCDate()-i),t.setUTCHours(0,0,0,0),t}function c(r){n(1,arguments);var e=o(r),t=e.getUTCFullYear(),a=new Date(0);a.setUTCFullYear(t+1,0,4),a.setUTCHours(0,0,0,0);var i=l(a),A=new Date(0);A.setUTCFullYear(t,0,4),A.setUTCHours(0,0,0,0);var d=l(A);return e.getTime()>=i.getTime()?t+1:e.getTime()>=d.getTime()?t:t-1}function u(r){n(1,arguments);var e=c(r),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var o=l(t);return o}var p=6048e5,g={};function h(){return g}function C(r,e){var t,a,A,d,s,l,c,u;n(1,arguments);var p=h(),g=i(null!==(t=null!==(a=null!==(A=null!==(d=null==e?void 0:e.weekStartsOn)&&void 0!==d?d:null==e||null===(s=e.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==A?A:p.weekStartsOn)&&void 0!==a?a:null===(c=p.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==t?t:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var C=o(r),m=C.getUTCDay(),b=(m<g?7:0)+m-g;return C.setUTCDate(C.getUTCDate()-b),C.setUTCHours(0,0,0,0),C}function m(r,e){var t,a,A,d,s,l,c,u;n(1,arguments);var p=o(r),g=p.getUTCFullYear(),m=h(),b=i(null!==(t=null!==(a=null!==(A=null!==(d=null==e?void 0:e.firstWeekContainsDate)&&void 0!==d?d:null==e||null===(s=e.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==A?A:m.firstWeekContainsDate)&&void 0!==a?a:null===(c=m.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==t?t:1);if(!(b>=1&&b<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(g+1,0,b),f.setUTCHours(0,0,0,0);var x=C(f,e),B=new Date(0);B.setUTCFullYear(g,0,b),B.setUTCHours(0,0,0,0);var I=C(B,e);return p.getTime()>=x.getTime()?g+1:p.getTime()>=I.getTime()?g:g-1}function b(r,e){var t,o,a,A,d,s,l,c;n(1,arguments);var u=h(),p=i(null!==(t=null!==(o=null!==(a=null!==(A=null==e?void 0:e.firstWeekContainsDate)&&void 0!==A?A:null==e||null===(d=e.locale)||void 0===d||null===(s=d.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==a?a:u.firstWeekContainsDate)&&void 0!==o?o:null===(l=u.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),g=m(r,e),b=new Date(0);b.setUTCFullYear(g,0,p),b.setUTCHours(0,0,0,0);var f=C(b,e);return f}var f=6048e5;function x(n,r){for(var e=n<0?"-":"",t=Math.abs(n).toString();t.length<r;)t="0"+t;return e+t}const B=function(n,r){var e=n.getUTCFullYear(),t=e>0?e:1-e;return x("yy"===r?t%100:t,r.length)},I=function(n,r){var e=n.getUTCMonth();return"M"===r?String(e+1):x(e+1,2)},w=function(n,r){return x(n.getUTCDate(),r.length)},v=function(n,r){return x(n.getUTCHours()%12||12,r.length)},y=function(n,r){return x(n.getUTCHours(),r.length)},k=function(n,r){return x(n.getUTCMinutes(),r.length)},E=function(n,r){return x(n.getUTCSeconds(),r.length)},T=function(n,r){var e=r.length,t=n.getUTCMilliseconds();return x(Math.floor(t*Math.pow(10,e-3)),r.length)};var S={G:function(n,r,e){var t=n.getUTCFullYear()>0?1:0;switch(r){case"G":case"GG":case"GGG":return e.era(t,{width:"abbreviated"});case"GGGGG":return e.era(t,{width:"narrow"});default:return e.era(t,{width:"wide"})}},y:function(n,r,e){if("yo"===r){var t=n.getUTCFullYear(),o=t>0?t:1-t;return e.ordinalNumber(o,{unit:"year"})}return B(n,r)},Y:function(n,r,e,t){var o=m(n,t),a=o>0?o:1-o;return"YY"===r?x(a%100,2):"Yo"===r?e.ordinalNumber(a,{unit:"year"}):x(a,r.length)},R:function(n,r){return x(c(n),r.length)},u:function(n,r){return x(n.getUTCFullYear(),r.length)},Q:function(n,r,e){var t=Math.ceil((n.getUTCMonth()+1)/3);switch(r){case"Q":return String(t);case"QQ":return x(t,2);case"Qo":return e.ordinalNumber(t,{unit:"quarter"});case"QQQ":return e.quarter(t,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(t,{width:"narrow",context:"formatting"});default:return e.quarter(t,{width:"wide",context:"formatting"})}},q:function(n,r,e){var t=Math.ceil((n.getUTCMonth()+1)/3);switch(r){case"q":return String(t);case"qq":return x(t,2);case"qo":return e.ordinalNumber(t,{unit:"quarter"});case"qqq":return e.quarter(t,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(t,{width:"narrow",context:"standalone"});default:return e.quarter(t,{width:"wide",context:"standalone"})}},M:function(n,r,e){var t=n.getUTCMonth();switch(r){case"M":case"MM":return I(n,r);case"Mo":return e.ordinalNumber(t+1,{unit:"month"});case"MMM":return e.month(t,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(t,{width:"narrow",context:"formatting"});default:return e.month(t,{width:"wide",context:"formatting"})}},L:function(n,r,e){var t=n.getUTCMonth();switch(r){case"L":return String(t+1);case"LL":return x(t+1,2);case"Lo":return e.ordinalNumber(t+1,{unit:"month"});case"LLL":return e.month(t,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(t,{width:"narrow",context:"standalone"});default:return e.month(t,{width:"wide",context:"standalone"})}},w:function(r,e,t,a){var i=function(r,e){n(1,arguments);var t=o(r),a=C(t,e).getTime()-b(t,e).getTime();return Math.round(a/f)+1}(r,a);return"wo"===e?t.ordinalNumber(i,{unit:"week"}):x(i,e.length)},I:function(r,e,t){var a=function(r){n(1,arguments);var e=o(r),t=l(e).getTime()-u(e).getTime();return Math.round(t/p)+1}(r);return"Io"===e?t.ordinalNumber(a,{unit:"week"}):x(a,e.length)},d:function(n,r,e){return"do"===r?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):w(n,r)},D:function(r,e,t){var a=function(r){n(1,arguments);var e=o(r),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var a=e.getTime(),i=t-a;return Math.floor(i/s)+1}(r);return"Do"===e?t.ordinalNumber(a,{unit:"dayOfYear"}):x(a,e.length)},E:function(n,r,e){var t=n.getUTCDay();switch(r){case"E":case"EE":case"EEE":return e.day(t,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(t,{width:"short",context:"formatting"});default:return e.day(t,{width:"wide",context:"formatting"})}},e:function(n,r,e,t){var o=n.getUTCDay(),a=(o-t.weekStartsOn+8)%7||7;switch(r){case"e":return String(a);case"ee":return x(a,2);case"eo":return e.ordinalNumber(a,{unit:"day"});case"eee":return e.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},c:function(n,r,e,t){var o=n.getUTCDay(),a=(o-t.weekStartsOn+8)%7||7;switch(r){case"c":return String(a);case"cc":return x(a,r.length);case"co":return e.ordinalNumber(a,{unit:"day"});case"ccc":return e.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(o,{width:"narrow",context:"standalone"});case"cccccc":return e.day(o,{width:"short",context:"standalone"});default:return e.day(o,{width:"wide",context:"standalone"})}},i:function(n,r,e){var t=n.getUTCDay(),o=0===t?7:t;switch(r){case"i":return String(o);case"ii":return x(o,r.length);case"io":return e.ordinalNumber(o,{unit:"day"});case"iii":return e.day(t,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(t,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(t,{width:"short",context:"formatting"});default:return e.day(t,{width:"wide",context:"formatting"})}},a:function(n,r,e){var t=n.getUTCHours()/12>=1?"pm":"am";switch(r){case"a":case"aa":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(t,{width:"narrow",context:"formatting"});default:return e.dayPeriod(t,{width:"wide",context:"formatting"})}},b:function(n,r,e){var t,o=n.getUTCHours();switch(t=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",r){case"b":case"bb":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(t,{width:"narrow",context:"formatting"});default:return e.dayPeriod(t,{width:"wide",context:"formatting"})}},B:function(n,r,e){var t,o=n.getUTCHours();switch(t=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",r){case"B":case"BB":case"BBB":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(t,{width:"narrow",context:"formatting"});default:return e.dayPeriod(t,{width:"wide",context:"formatting"})}},h:function(n,r,e){if("ho"===r){var t=n.getUTCHours()%12;return 0===t&&(t=12),e.ordinalNumber(t,{unit:"hour"})}return v(n,r)},H:function(n,r,e){return"Ho"===r?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):y(n,r)},K:function(n,r,e){var t=n.getUTCHours()%12;return"Ko"===r?e.ordinalNumber(t,{unit:"hour"}):x(t,r.length)},k:function(n,r,e){var t=n.getUTCHours();return 0===t&&(t=24),"ko"===r?e.ordinalNumber(t,{unit:"hour"}):x(t,r.length)},m:function(n,r,e){return"mo"===r?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):k(n,r)},s:function(n,r,e){return"so"===r?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):E(n,r)},S:function(n,r){return T(n,r)},X:function(n,r,e,t){var o=(t._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(r){case"X":return Q(o);case"XXXX":case"XX":return Y(o);default:return Y(o,":")}},x:function(n,r,e,t){var o=(t._originalDate||n).getTimezoneOffset();switch(r){case"x":return Q(o);case"xxxx":case"xx":return Y(o);default:return Y(o,":")}},O:function(n,r,e,t){var o=(t._originalDate||n).getTimezoneOffset();switch(r){case"O":case"OO":case"OOO":return"GMT"+j(o,":");default:return"GMT"+Y(o,":")}},z:function(n,r,e,t){var o=(t._originalDate||n).getTimezoneOffset();switch(r){case"z":case"zz":case"zzz":return"GMT"+j(o,":");default:return"GMT"+Y(o,":")}},t:function(n,r,e,t){var o=t._originalDate||n;return x(Math.floor(o.getTime()/1e3),r.length)},T:function(n,r,e,t){return x((t._originalDate||n).getTime(),r.length)}};function j(n,r){var e=n>0?"-":"+",t=Math.abs(n),o=Math.floor(t/60),a=t%60;if(0===a)return e+String(o);var i=r||"";return e+String(o)+i+x(a,2)}function Q(n,r){return n%60==0?(n>0?"-":"+")+x(Math.abs(n)/60,2):Y(n,r)}function Y(n,r){var e=r||"",t=n>0?"-":"+",o=Math.abs(n);return t+x(Math.floor(o/60),2)+e+x(o%60,2)}const U=S;var D=function(n,r){switch(n){case"P":return r.date({width:"short"});case"PP":return r.date({width:"medium"});case"PPP":return r.date({width:"long"});default:return r.date({width:"full"})}},M=function(n,r){switch(n){case"p":return r.time({width:"short"});case"pp":return r.time({width:"medium"});case"ppp":return r.time({width:"long"});default:return r.time({width:"full"})}};const W={p:M,P:function(n,r){var e,t=n.match(/(P+)(p+)?/)||[],o=t[1],a=t[2];if(!a)return D(n,r);switch(o){case"P":e=r.dateTime({width:"short"});break;case"PP":e=r.dateTime({width:"medium"});break;case"PPP":e=r.dateTime({width:"long"});break;default:e=r.dateTime({width:"full"})}return e.replace("{{date}}",D(o,r)).replace("{{time}}",M(a,r))}};function q(n){var r=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return r.setUTCFullYear(n.getFullYear()),n.getTime()-r.getTime()}var z=["D","DD"],P=["YY","YYYY"];function L(n){return-1!==z.indexOf(n)}function O(n){return-1!==P.indexOf(n)}function Z(n,r,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(r,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(r,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(r,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(r,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var G={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function F(n){return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=r.width?String(r.width):n.defaultWidth,t=n.formats[e]||n.formats[n.defaultWidth];return t}}const N={date:F({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:F({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:F({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var H={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function R(n){return function(r,e){var t;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,a=null!=e&&e.width?String(e.width):o;t=n.formattingValues[a]||n.formattingValues[o]}else{var i=n.defaultWidth,A=null!=e&&e.width?String(e.width):n.defaultWidth;t=n.values[A]||n.values[i]}return t[n.argumentCallback?n.argumentCallback(r):r]}}const X={ordinalNumber:function(n,r){var e=Number(n),t=e%100;if(t>20||t<10)switch(t%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:R({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:R({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:R({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:R({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:R({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function J(n){return function(r){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.width,o=t&&n.matchPatterns[t]||n.matchPatterns[n.defaultMatchWidth],a=r.match(o);if(!a)return null;var i,A=a[0],d=t&&n.parsePatterns[t]||n.parsePatterns[n.defaultParseWidth],s=Array.isArray(d)?_(d,(function(n){return n.test(A)})):V(d,(function(n){return n.test(A)}));i=n.valueCallback?n.valueCallback(s):s,i=e.valueCallback?e.valueCallback(i):i;var l=r.slice(A.length);return{value:i,rest:l}}}function V(n,r){for(var e in n)if(n.hasOwnProperty(e)&&r(n[e]))return e}function _(n,r){for(var e=0;e<n.length;e++)if(r(n[e]))return e}var K,$={ordinalNumber:(K={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(K.matchPattern);if(!e)return null;var t=e[0],o=n.match(K.parsePattern);if(!o)return null;var a=K.valueCallback?K.valueCallback(o[0]):o[0];a=r.valueCallback?r.valueCallback(a):a;var i=n.slice(t.length);return{value:a,rest:i}}),era:J({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:J({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:J({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:J({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:J({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const nn={code:"en-US",formatDistance:function(n,r,e){var t,o=G[n];return t="string"==typeof o?o:1===r?o.one:o.other.replace("{{count}}",r.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+t:t+" ago":t},formatLong:N,formatRelative:function(n,r,e,t){return H[n]},localize:X,match:$,options:{weekStartsOn:0,firstWeekContainsDate:1}};var rn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,en=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,tn=/^'([^]*?)'?$/,on=/''/g,an=/[a-zA-Z]/;function An(n){var r=n.match(tn);return r?r[1].replace(on,"'"):n}const dn=document.querySelector(".content"),sn=(document.querySelector(".add-button"),document.querySelector(".details-button"),document.querySelector(".home"),document.querySelector(".details-window")),ln=document.querySelector(".edit-window"),cn=(document.querySelector(".edit-button"),document.querySelector(".overlay")),un=document.querySelector(".close-details-button"),pn=document.querySelector(".close-edit-button"),gn=document.querySelector(".add-task"),hn=document.querySelector(".todo-content"),Cn=document.querySelector(".edit-title-input"),mn=document.querySelector(".edit-details-input"),bn=document.querySelector(".edit-date-input"),fn=document.querySelector(".edit-priority-input"),xn=(document.querySelector(".edit-project-input"),document.querySelector(".submit-task")),Bn=document.querySelector(".details-label"),In=document.querySelector(".details-title"),wn=document.querySelector(".details-description"),vn=document.querySelector(".details-priority"),yn=document.querySelector(".details-dueDate"),kn=document.querySelector(".nav-toggle"),En=document.querySelector("nav"),Tn=document.querySelector(".fullscreen-btn"),Sn=document.querySelector(".add-project-btn"),jn=document.querySelector(".project-window"),Qn=document.querySelector(".project-name-input"),Yn=document.querySelector(".submit-project"),Un=document.querySelector(".close-project-window"),Dn=document.querySelector(".project-list"),Mn=document.getElementsByClassName("select-project"),Wn=document.getElementsByClassName("select-container"),qn=document.getElementsByClassName("number-of-tasks"),zn=(document.getElementsByClassName("delete-project"),document.querySelector(".content-header"));let Pn=!0,Ln=!1;function On(n){screen.width>500&&(Pn=!1),n.classList.remove("display-none"),setTimeout((()=>{cn.classList.remove("overlay-display-none")}),250),Ln=!0}function Zn(n){Ln=!1,setTimeout((()=>{n.classList.add("display-none")}),60),0==Pn&&cn.classList.add("overlay-display-none")}function Gn(){screen.width<500?1==Pn?Fn():(En.classList.remove("nav-close"),0==Ln&&cn.classList.remove("overlay-display-none"),Pn=!0):(En.classList.toggle("nav-close"),dn.classList.toggle("content-expand"))}function Fn(){En.classList.add("nav-close"),0==Ln&&cn.classList.add("overlay-display-none"),Pn=!1}const Nn=e.p+"c11ca64583db9195885d.svg";function Hn(n,r,e,t,o){In.innerText=n,console.log("🚀 ~ file: detailsWindow.js ~ line 38 ~ altDetailsComponent ~ detailsTitle",In),wn.innerText=r,Bn.innerText="Project: "+o,Bn.style.textTransform="capitalize",vn.innerText=e,yn.innerText="Due date: "+t}var Rn;const Xn=function(n,r,e,t,o,a){Rn=a,Cn.value=n,mn.value=r,bn.value=t,fn.value=e,console.log("EditComponentIndex: ",Rn)};var Jn=e(379),Vn=e.n(Jn),_n=e(795),Kn=e.n(_n),$n=e(569),nr=e.n($n),rr=e(565),er=e.n(rr),tr=e(216),or=e.n(tr),ar=e(589),ir=e.n(ar),Ar=e(211),dr={};dr.styleTagTransform=ir(),dr.setAttributes=er(),dr.insert=nr().bind(null,"head"),dr.domAPI=Kn(),dr.insertStyleElement=or(),Vn()(Ar.Z,dr),Ar.Z&&Ar.Z.locals&&Ar.Z.locals;var sr=e(206),lr={};lr.styleTagTransform=ir(),lr.setAttributes=er(),lr.insert=nr().bind(null,"head"),lr.domAPI=Kn(),lr.insertStyleElement=or(),Vn()(sr.Z,lr),sr.Z&&sr.Z.locals&&sr.Z.locals;var cr=e(193),ur={};ur.styleTagTransform=ir(),ur.setAttributes=er(),ur.insert=nr().bind(null,"head"),ur.domAPI=Kn(),ur.insertStyleElement=or(),Vn()(cr.Z,ur),cr.Z&&cr.Z.locals&&cr.Z.locals;var pr=e(772),gr={};gr.styleTagTransform=ir(),gr.setAttributes=er(),gr.insert=nr().bind(null,"head"),gr.domAPI=Kn(),gr.insertStyleElement=or(),Vn()(pr.Z,gr),pr.Z&&pr.Z.locals&&pr.Z.locals;var hr=e(865),Cr={};Cr.styleTagTransform=ir(),Cr.setAttributes=er(),Cr.insert=nr().bind(null,"head"),Cr.domAPI=Kn(),Cr.insertStyleElement=or(),Vn()(hr.Z,Cr),hr.Z&&hr.Z.locals&&hr.Z.locals;var mr=e(430),br={};br.styleTagTransform=ir(),br.setAttributes=er(),br.insert=nr().bind(null,"head"),br.domAPI=Kn(),br.insertStyleElement=or(),Vn()(mr.Z,br),mr.Z&&mr.Z.locals&&mr.Z.locals;var fr=e(604),xr={};xr.styleTagTransform=ir(),xr.setAttributes=er(),xr.insert=nr().bind(null,"head"),xr.domAPI=Kn(),xr.insertStyleElement=or(),Vn()(fr.Z,xr),fr.Z&&fr.Z.locals&&fr.Z.locals;let Br=[[{project:"Inbox",priority:"low",title:"Get registered",details:"Say hello",dueDate:"12/12/4314",complete:!1},{project:"Inbox",priority:"Medium",title:"Exercise task 2",details:"ljnwdlvkn olskvmm",dueDate:"12/12/4314",complete:!1},{project:"Inbox",priority:"Low",title:"Some random exercise title blah blah blah",details:"Some random exercise description ",dueDate:"12/12/4314",complete:!1}],[{project:"School",priority:"Urgent",title:"Attend Math class",details:"Don't miss Sunday's math class",dueDate:"12/12/4314",complete:!1},{project:"School",priority:"Medium",title:"Go home",details:"Don't hang around school",dueDate:"12/12/4314",complete:!1},{project:"School",priority:"Low",title:"Help the old lady",details:"The old lady across the road",dueDate:"12/12/4314",complete:!1}]];localStorage.getItem("allProjects")?(Br=JSON.parse(localStorage.getItem("allProjects")),console.log("Array Of Projects: ",Br)):Br=[];const Ir=class{constructor(n,r){this.arrayOfTodos=n,this.nameOfProject=r}displayTasks(){hn.innerHTML="",this.arrayOfTodos.forEach(((n,r)=>{hn.append(function(n,r,e,t,o,a,i){let A=a;console.log("Project:",o);const d=document.createElement("div");d.classList.add("todo-item"),d.classList.add(e+"-priority");const s=document.createElement("div"),l=document.createElement("input");function c(){u.classList.add("title-complete"),d.classList.add("todo-complete")}l.type="checkbox",l.checked=i,l.addEventListener("change",(()=>{u.classList.toggle("title-complete"),d.classList.toggle("todo-complete"),Ur.arrayOfTodos.forEach(((n,r)=>{A==r&&(1==l.checked?(n.complete=!0,c()):(n.complete=!1,u.classList.remove("title-complete"),d.classList.remove("todo-complete"))),console.log("Foreach: ",n.complete)})),console.log("From Checkbox: ",jr),Ur.saveData()}));const u=document.createElement("p");u.classList.add("title"),u.innerText=n,!0===l.checked&&c(),s.append(l,u);const p=document.createElement("div"),g=document.createElement("button");g.classList.add("details-button"),g.innerText="Info";const h=document.createElement("img");h.classList.add("edit-button"),h.src=Nn;const C=document.createElement("button");C.classList.add("delete-button"),C.innerText="Del",C.addEventListener("click",(()=>{console.log("Current Project:",Ur),Ur.deleteTask(A)}));const m=document.createElement("p");return m.classList.add("date"),m.innerText=t,p.append(g,h,m,C),d.append(s,p),g.addEventListener("click",(()=>{On(sn),Hn(n,r,e,t,o)})),u.addEventListener("click",(()=>{On(sn),Hn(n,r,e,t,o)})),h.addEventListener("click",(()=>{On(ln),Xn(n,r,e,t,o,A),Dr="editingTask",console.log("Edit Button Index: ",A)})),pn.addEventListener("click",(()=>{Zn(ln)})),un.addEventListener("click",(()=>{Zn(sn),console.log("Close Details")})),d}(n.title,n.details,n.priority,n.dueDate,n.project,r,n.complete))}))}addTask(n){this.arrayOfTodos.unshift(n),this.displayTasks(),Zn(ln),Tr(),this.saveData()}addTaskWindow(){On(ln)}deleteTask(n){this.arrayOfTodos.splice(n,1),this.displayTasks(),Tr(),this.saveData()}editTask(n,r){this.arrayOfTodos.splice(n,1,r),this.displayTasks(),Zn(ln),this.saveData()}altEditTask(n,r){this.arrayOfTodos.forEach(((e,t)=>{n==t&&(e.title=r.title,e.details=r.details,e.priority=r.priority,e.dueDate=r.dueDate,e.project=r.project,e.complete=r.complete)})),this.displayTasks(),Zn(ln),this.saveData()}saveData(){let n=JSON.stringify(jr);localStorage.setItem("allProjects",n),console.log("Class all projects: ",Br),console.log("Class all projects: ",jr),console.log("Project Objects: ",jr)}};let wr,vr,yr;function kr(){for(let n=0;n<Mn.length;n++)Mn[n].addEventListener("click",(r=>{console.log("Project Element Name: ",Mn[n].innerText),jr.forEach((r=>{r.nameOfProject==Mn[n].innerText&&(wr=Mn[n].innerText,vr&&(vr.classList.remove("project-selected"),yr.classList.remove("container-selected")),vr=Mn[n],vr.classList.add("project-selected"),yr=Wn[n],yr.classList.add("container-selected"),zn.innerText="-- "+Mn[n].innerText+" --",Ur=r,Ur.displayTasks(),screen.width<500&&Fn())}))}))}function Er(n,r,e){const t=document.createElement("div");t.classList.add("select-container");const o=document.createElement("div");o.classList.add("select-project"),o.innerText=n;const a=document.createElement("p");a.classList.add("number-of-tasks"),a.innerText=0,e&&(a.innerHTML=e);const i=document.createElement("button");return i.classList.add("delete-project"),i.innerText="del",i.addEventListener("click",(()=>{jr.splice(r,1),Tr()})),t.append(o,i,a),t}function Tr(){Dn.innerHTML="",jr.forEach(((n,r)=>{r<=1&&(qn[r].innerText=n.arrayOfTodos.length),r>1&&(console.log("Project Object: ",n.arrayOfTodos.length),Dn.appendChild(Er(n.nameOfProject,r,n.arrayOfTodos.length)),kr())}))}console.log(function(r,e,t){var A,s,l,c,u,p,g,C,m,b,f,x,B,I,w,v,y,k;n(2,arguments);var E=String(e),T=h(),S=null!==(A=null!==(s=null==t?void 0:t.locale)&&void 0!==s?s:T.locale)&&void 0!==A?A:nn,j=i(null!==(l=null!==(c=null!==(u=null!==(p=null==t?void 0:t.firstWeekContainsDate)&&void 0!==p?p:null==t||null===(g=t.locale)||void 0===g||null===(C=g.options)||void 0===C?void 0:C.firstWeekContainsDate)&&void 0!==u?u:T.firstWeekContainsDate)&&void 0!==c?c:null===(m=T.locale)||void 0===m||null===(b=m.options)||void 0===b?void 0:b.firstWeekContainsDate)&&void 0!==l?l:1);if(!(j>=1&&j<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var Q=i(null!==(f=null!==(x=null!==(B=null!==(I=null==t?void 0:t.weekStartsOn)&&void 0!==I?I:null==t||null===(w=t.locale)||void 0===w||null===(v=w.options)||void 0===v?void 0:v.weekStartsOn)&&void 0!==B?B:T.weekStartsOn)&&void 0!==x?x:null===(y=T.locale)||void 0===y||null===(k=y.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==f?f:0);if(!(Q>=0&&Q<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var Y=o(r);if(!a(Y))throw new RangeError("Invalid time value");var D=q(Y),M=d(Y,D),z={firstWeekContainsDate:j,weekStartsOn:Q,locale:S,_originalDate:Y},P=E.match(en).map((function(n){var r=n[0];return"p"===r||"P"===r?(0,W[r])(n,S.formatLong):n})).join("").match(rn).map((function(n){if("''"===n)return"'";var o=n[0];if("'"===o)return An(n);var a=U[o];if(a)return null!=t&&t.useAdditionalWeekYearTokens||!O(n)||Z(n,e,String(r)),null!=t&&t.useAdditionalDayOfYearTokens||!L(n)||Z(n,e,String(r)),a(M,n,S.localize,z);if(o.match(an))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return n})).join("");return P}(new Date(2022,2,43),"MM/dd/yyyy")),window.addEventListener("load",(()=>{screen.width<500&&Gn(),Tr()})),Yn.addEventListener("click",(n=>{Zn(jn),console.log(Dn),jr.push(new Ir([],Qn.value)),Dn.appendChild(Er(Qn.value,jr.length-1)),console.log("New Project: ",jr),kr(),Ur.saveData()})),Sn.addEventListener("click",(()=>{On(jn)})),Un.addEventListener("click",(()=>{console.log("Hello project"),Zn(jn)})),Tn.addEventListener("click",(()=>{const n=document.documentElement;n.requestFullscreen?n.requestFullscreen():n.webkitRequestFullscreen?n.webkitRequestFullscreen():n.msRequestFullscreen&&n.msRequestFullscreen()})),kn.addEventListener("click",(()=>{Gn()})),pn.addEventListener("click",(()=>{Zn(ln)})),un.addEventListener("click",(()=>{Zn(sn)})),window.onload=function(){},kr();const Sr=new Ir([{project:"Home",priority:"Medium",title:"House cleaning day",details:"Don't forget the toilets",dueDate:"12/12/4314",complete:!1},{project:"Home",priority:"High",title:"House task",details:"Ask Rhoda for her math assignment",dueDate:"12/12/4824",complete:!1},{project:"Home",priority:"Low",title:"Another house task",details:"Gym registration.",dueDate:"12/12/4124",complete:!1}],"Home");let jr=[];const Qr=new Ir([],"Inbox"),Yr=new Ir([],"All");let Ur;jr=0==Br.length?[Qr,Yr]:[],Br.forEach(((n,r)=>{console.log("Project Item",n.nameOfProject),console.log(r);let e=new Ir(n.arrayOfTodos,n.nameOfProject);jr.push(e)}));let Dr="addingTask";gn.addEventListener("click",(()=>{Sr.addTaskWindow(ln),console.log("Hello"),Dr="addingTask"})),xn.addEventListener("click",(()=>{console.log("Current: ",Ur),"addingTask"===Dr?Ur.addTask({title:Cn.value,details:mn.value,priority:fn.value,dueDate:bn.value,project:Ur.nameOfProject,complete:!1}):"editingTask"===Dr&&(Ur.editTask(Rn,{title:Cn.value,details:mn.value,priority:fn.value,dueDate:bn.value,project:Ur.nameOfProject,complete:Ur.arrayOfTodos[Rn].complete}),Dr="addingTask",console.log("Component index: ",Rn))})),Mn[0].click()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,