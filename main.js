(()=>{"use strict";var n={193:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,"button {\r\n    background: none;\r\n    border: none;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    transition: 0.1s;\r\n    cursor: pointer;\r\n    /* box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px; */\r\n}\r\n\r\nbutton:hover {\r\n  background-color: blanchedalmond;\r\n  background: #ebe9e9;\r\n}\r\n\r\n.add-project-btn {\r\n  padding: 3px;\r\n  display: grid;\r\n  place-items: center;\r\n  color: grey;\r\n}\r\n\r\n.fullscreen-btn {\r\n    /* position: fixed; */\r\n    bottom: 0px;\r\n    left: 0px;\r\n    /* background: grey; */\r\n    color: white;\r\n    /* padding: 10px; */\r\n    border-top-right-radius: 5px;\r\n    z-index: 2;\r\n}\r\n\r\n.close-details-button, .close-edit-button {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n} \r\n\r\n.details-button {\r\n    padding: 7px;\r\n    /* border: 1px solid rgb(143, 143, 252); */\r\n    border-radius: 5px;\r\n    /* box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px; */\r\n}\r\n\r\n.nav-toggle {\r\n    display: grid;\r\n    place-items: center;\r\n    /* padding: 5px; */\r\n    /* box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px, rgba(0, 0, 0, 0.1) 0px 0px 1px 0px; */\r\n}\r\n\r\n.nav-toggle:hover {\r\n  background: initial;\r\n}\r\n\r\n\r\n\r\n  ","",{version:3,sources:["webpack://./src/styles/buttonsAndLinks.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,YAAY;IACZ,aAAa;IACb,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,kFAAkF;AACtF;;AAEA;EACE,gCAAgC;EAChC,mBAAmB;AACrB;;AAEA;EACE,YAAY;EACZ,aAAa;EACb,mBAAmB;EACnB,WAAW;AACb;;AAEA;IACI,qBAAqB;IACrB,WAAW;IACX,SAAS;IACT,sBAAsB;IACtB,YAAY;IACZ,mBAAmB;IACnB,4BAA4B;IAC5B,UAAU;AACd;;AAEA;IACI,kBAAkB;IAClB,SAAS;IACT,WAAW;AACf;;AAEA;IACI,YAAY;IACZ,0CAA0C;IAC1C,kBAAkB;IAClB,kFAAkF;AACtF;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,kBAAkB;IAClB,wFAAwF;AAC5F;;AAEA;EACE,mBAAmB;AACrB",sourcesContent:["button {\r\n    background: none;\r\n    border: none;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n    transition: 0.1s;\r\n    cursor: pointer;\r\n    /* box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px; */\r\n}\r\n\r\nbutton:hover {\r\n  background-color: blanchedalmond;\r\n  background: #ebe9e9;\r\n}\r\n\r\n.add-project-btn {\r\n  padding: 3px;\r\n  display: grid;\r\n  place-items: center;\r\n  color: grey;\r\n}\r\n\r\n.fullscreen-btn {\r\n    /* position: fixed; */\r\n    bottom: 0px;\r\n    left: 0px;\r\n    /* background: grey; */\r\n    color: white;\r\n    /* padding: 10px; */\r\n    border-top-right-radius: 5px;\r\n    z-index: 2;\r\n}\r\n\r\n.close-details-button, .close-edit-button {\r\n    position: absolute;\r\n    top: 10px;\r\n    right: 10px;\r\n} \r\n\r\n.details-button {\r\n    padding: 7px;\r\n    /* border: 1px solid rgb(143, 143, 252); */\r\n    border-radius: 5px;\r\n    /* box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px; */\r\n}\r\n\r\n.nav-toggle {\r\n    display: grid;\r\n    place-items: center;\r\n    /* padding: 5px; */\r\n    /* box-shadow: rgba(0, 0, 0, 0.1) 0px 0px 5px 0px, rgba(0, 0, 0, 0.1) 0px 0px 1px 0px; */\r\n}\r\n\r\n.nav-toggle:hover {\r\n  background: initial;\r\n}\r\n\r\n\r\n\r\n  "],sourceRoot:""}]);const A=a},206:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,":root {\r\n    --low-priority: rgb(167, 238, 167);\r\n    --medium-priority: rgb(240, 220, 107);\r\n    --high-priority: rgb(247, 124, 120);\r\n}\r\n\r\n.details-window, .edit-window {\r\n    width: min(700px, 90vw);\r\n    min-height: 300px;\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%; \r\n    transform: translate(-50%, -50%) scale(1);\r\n    z-index: 20;\r\n    background: white;\r\n    border-radius: 5px;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transition: 0.3s;\r\n    /* animation: displayEnter 0.4s; */\r\n    /* animation: altDisplayEnter 0.4s; */\r\n    opacity: 1;\r\n    /* will-change: transform, opacity; */\r\n}\r\n\r\n@keyframes displayEnter {\r\n    0% {\r\n        opacity: 0;\r\n        top: 40%;\r\n        /* transform: translate(-50%, -50%) scale(1);  */\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n@keyframes altDisplayEnter {\r\n    0% {\r\n        opacity: 0;\r\n        /* top: 40%; */\r\n        /* transform: translate(-50%, -50%) scale(1);  */\r\n    }\r\n    2% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\nlabel {\r\n    /* background: khaki; */\r\n    width: 50%;\r\n}\r\n\r\n.details-window {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 20px;\r\n    background: var(--medium-priority);\r\n    top: 50%;\r\n    left: 50%; \r\n    transform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n/* .close-details-button {\r\n    position: relative;\r\n} */\r\n\r\n\r\n.details-window div:first-child {\r\n    display: flex;\r\n}\r\n\r\n.details-window div:nth-child(2) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 10px;\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\n.details-description {\r\n}\r\n\r\n\r\n.details-title {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    /* width: 200px; */\r\n    color:rgb(82, 116, 102);\r\n    text-decoration: underline;\r\n}\r\n.details-label {\r\n    font-size: 12px;\r\n    font-weight: bold;\r\n    opacity: 0.4;\r\n    position: absolute;\r\n    bottom: 10px;\r\n    right: 10px;\r\n}\r\n\r\n.details-priority {\r\n    /* border: 1px solid red; */\r\n    /* align-self: center; */\r\n    border-radius: 4px;\r\n    padding: 5px;\r\n    color: rgb(80, 80, 80);\r\n    background: yellow;\r\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\r\n}\r\n\r\n.priority-meter {\r\n    color: black;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 60px;\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n\r\n    \r\n    position: sticky;\r\n    z-index: 2000;\r\n    bottom: 0;\r\n    left:0;\r\n}\r\n\r\n.priority-meter > * {\r\n    padding-left: 4px;\r\n    border-radius: 3px;\r\n}\r\n\r\n.low {\r\n    background-color: var(--low-priority);\r\n}\r\n.medium {\r\n    background-color: rgb(240, 220, 107);\r\n\r\n}\r\n.high {\r\n    background-color: var(--high-priority);\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .details-window {\r\n        width: 100vw;\r\n        height: 50vh;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","",{version:3,sources:["webpack://./src/styles/detailsWindow.css"],names:[],mappings:"AAAA;IACI,kCAAkC;IAClC,qCAAqC;IACrC,mCAAmC;AACvC;;AAEA;IACI,uBAAuB;IACvB,iBAAiB;IACjB,eAAe;IACf,QAAQ;IACR,SAAS;IACT,yCAAyC;IACzC,WAAW;IACX,iBAAiB;IACjB,kBAAkB;IAClB,yFAAyF;IACzF,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,gBAAgB;IAChB,kCAAkC;IAClC,qCAAqC;IACrC,UAAU;IACV,qCAAqC;AACzC;;AAEA;IACI;QACI,UAAU;QACV,QAAQ;QACR,gDAAgD;IACpD;IACA;QACI,UAAU;IACd;AACJ;AACA;IACI;QACI,UAAU;QACV,cAAc;QACd,gDAAgD;IACpD;IACA;QACI,UAAU;IACd;IACA;QACI,UAAU;IACd;AACJ;;AAEA;IACI,uBAAuB;IACvB,UAAU;AACd;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,aAAa;IACb,uBAAuB;IACvB,mBAAmB;IACnB,SAAS;IACT,kCAAkC;IAClC,QAAQ;IACR,SAAS;IACT,yCAAyC;AAC7C;;AAEA;;GAEG;;;AAGH;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;IACT,WAAW;IACX,gBAAgB;AACpB;;AAEA;AACA;;;AAGA;IACI,eAAe;IACf,iBAAiB;IACjB,kBAAkB;IAClB,uBAAuB;IACvB,0BAA0B;AAC9B;AACA;IACI,eAAe;IACf,iBAAiB;IACjB,YAAY;IACZ,kBAAkB;IAClB,YAAY;IACZ,WAAW;AACf;;AAEA;IACI,2BAA2B;IAC3B,wBAAwB;IACxB,kBAAkB;IAClB,YAAY;IACZ,sBAAsB;IACtB,kBAAkB;IAClB,4EAA4E;AAChF;;AAEA;IACI,YAAY;IACZ,aAAa;IACb,sBAAsB;IACtB,WAAW;IACX,eAAe;IACf,iBAAiB;;;IAGjB,gBAAgB;IAChB,aAAa;IACb,SAAS;IACT,MAAM;AACV;;AAEA;IACI,iBAAiB;IACjB,kBAAkB;AACtB;;AAEA;IACI,qCAAqC;AACzC;AACA;IACI,oCAAoC;;AAExC;AACA;IACI,sCAAsC;AAC1C;;AAEA;IACI;QACI,YAAY;QACZ,YAAY;IAChB;AACJ",sourcesContent:[":root {\r\n    --low-priority: rgb(167, 238, 167);\r\n    --medium-priority: rgb(240, 220, 107);\r\n    --high-priority: rgb(247, 124, 120);\r\n}\r\n\r\n.details-window, .edit-window {\r\n    width: min(700px, 90vw);\r\n    min-height: 300px;\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%; \r\n    transform: translate(-50%, -50%) scale(1);\r\n    z-index: 20;\r\n    background: white;\r\n    border-radius: 5px;\r\n    box-shadow: rgba(50, 50, 93, 0.25) 0px 6px 12px -2px, rgba(0, 0, 0, 0.3) 0px 3px 7px -3px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    transition: 0.3s;\r\n    /* animation: displayEnter 0.4s; */\r\n    /* animation: altDisplayEnter 0.4s; */\r\n    opacity: 1;\r\n    /* will-change: transform, opacity; */\r\n}\r\n\r\n@keyframes displayEnter {\r\n    0% {\r\n        opacity: 0;\r\n        top: 40%;\r\n        /* transform: translate(-50%, -50%) scale(1);  */\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n@keyframes altDisplayEnter {\r\n    0% {\r\n        opacity: 0;\r\n        /* top: 40%; */\r\n        /* transform: translate(-50%, -50%) scale(1);  */\r\n    }\r\n    2% {\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\nlabel {\r\n    /* background: khaki; */\r\n    width: 50%;\r\n}\r\n\r\n.details-window {\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 10px;\r\n    justify-content: center;\r\n    align-items: center;\r\n    gap: 20px;\r\n    background: var(--medium-priority);\r\n    top: 50%;\r\n    left: 50%; \r\n    transform: translate(-50%, -50%) scale(1);\r\n}\r\n\r\n/* .close-details-button {\r\n    position: relative;\r\n} */\r\n\r\n\r\n.details-window div:first-child {\r\n    display: flex;\r\n}\r\n\r\n.details-window div:nth-child(2) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 10px;\r\n    width: 100%;\r\n    text-align: left;\r\n}\r\n\r\n.details-description {\r\n}\r\n\r\n\r\n.details-title {\r\n    font-size: 20px;\r\n    font-weight: bold;\r\n    /* width: 200px; */\r\n    color:rgb(82, 116, 102);\r\n    text-decoration: underline;\r\n}\r\n.details-label {\r\n    font-size: 12px;\r\n    font-weight: bold;\r\n    opacity: 0.4;\r\n    position: absolute;\r\n    bottom: 10px;\r\n    right: 10px;\r\n}\r\n\r\n.details-priority {\r\n    /* border: 1px solid red; */\r\n    /* align-self: center; */\r\n    border-radius: 4px;\r\n    padding: 5px;\r\n    color: rgb(80, 80, 80);\r\n    background: yellow;\r\n    box-shadow: rgba(0, 0, 0, 0.12) 0px 1px 3px, rgba(0, 0, 0, 0.24) 0px 1px 2px;\r\n}\r\n\r\n.priority-meter {\r\n    color: black;\r\n    display: flex;\r\n    flex-direction: column;\r\n    width: 60px;\r\n    font-size: 14px;\r\n    font-weight: bold;\r\n\r\n    \r\n    position: sticky;\r\n    z-index: 2000;\r\n    bottom: 0;\r\n    left:0;\r\n}\r\n\r\n.priority-meter > * {\r\n    padding-left: 4px;\r\n    border-radius: 3px;\r\n}\r\n\r\n.low {\r\n    background-color: var(--low-priority);\r\n}\r\n.medium {\r\n    background-color: rgb(240, 220, 107);\r\n\r\n}\r\n.high {\r\n    background-color: var(--high-priority);\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .details-window {\r\n        width: 100vw;\r\n        height: 50vh;\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n"],sourceRoot:""}]);const A=a},291:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,".label-input {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n}\r\n\r\n.edit-label {\r\n    height: 30px;\r\n}\r\n\r\ntextarea {\r\n    resize: vertical;\r\n}\r\n\r\ninput, textarea, select {\r\n    padding: 5px;\r\n    border-radius: 5px;\r\n    border: 1px solid rgb(209, 209, 209);\r\n    /* border: none; */\r\n    height: 50px;\r\n}\r\n\r\n.edit-title-input {\r\n    display: grid;\r\n    place-items: center; \r\n}\r\n\r\n.editCreate-form {\r\n    /* min-height: 80%; */\r\n    width: 100%;\r\n    /* background: green; */\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 20px;\r\n} \r\n\r\n\r\n\r\n.submit-edit {\r\n    background: pink;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.editCreate-form > div:nth-child(2), .editCreate-form > div:first-child {\r\n    flex-direction: column;\r\n    display: flex;\r\n    gap: 20px;\r\n}\r\n\r\n.edit-details-input {\r\n    height: 100px;\r\n}\r\n\r\n.edit-window {\r\n    position: fixed;\r\n    width: min(700px, 90vw);\r\n    padding: 10px;\r\n    /* background: pink; */\r\n    background: whitesmoke;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    /* transform: translate(-50%, -50%) scale(1); */\r\n}\r\n\r\n.close-edit-button {\r\n    /* position: absolute;\r\n    top: 10px; */\r\n    background: none;\r\n    padding: 0;\r\n    top: 5px;\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .editCreate-form {\r\n        grid-template-columns: initial;\r\n        grid-template-rows: 1fr 1fr;\r\n        gap: 5px;\r\n    } \r\n\r\n    .close-edit-button {\r\n        /* background: rgb(204, 204, 204); */\r\n        color: grey;\r\n        background: none;\r\n        position: fixed;\r\n        top: 40px;\r\n        top: 10vh;\r\n    }\r\n    .edit-window {\r\n        border-radius: 0;\r\n        width: min(700px, 100vw);\r\n        height: max(800px, calc(100vh - 45px));\r\n\r\n        z-index: 100;\r\n        /* top: calc(50% - 45px);\r\n        height: calc(100vh - 45px); */\r\n    }\r\n\r\n    input, textarea, select {\r\n        padding: 5px;\r\n        border-radius: 5px;\r\n        border: 1px solid rgb(209, 209, 209);\r\n        height: 30px;\r\n    }\r\n    .edit-title-input {\r\n        height: 50px;\r\n    }\r\n  }\r\n\r\n\r\n  ","",{version:3,sources:["webpack://./src/styles/editWindow.css"],names:[],mappings:"AAAA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,gBAAgB;AACpB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,oCAAoC;IACpC,kBAAkB;IAClB,YAAY;AAChB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,qBAAqB;IACrB,WAAW;IACX,uBAAuB;IACvB,aAAa;IACb,8BAA8B;IAC9B,SAAS;AACb;;;;AAIA;IACI,gBAAgB;IAChB,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,sBAAsB;IACtB,aAAa;IACb,SAAS;AACb;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,eAAe;IACf,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,sBAAsB;IACtB,aAAa;IACb,sBAAsB;IACtB,uBAAuB;IACvB,SAAS;IACT,+CAA+C;AACnD;;AAEA;IACI;gBACY;IACZ,gBAAgB;IAChB,UAAU;IACV,QAAQ;AACZ;;AAEA;IACI;QACI,8BAA8B;QAC9B,2BAA2B;QAC3B,QAAQ;IACZ;;IAEA;QACI,oCAAoC;QACpC,WAAW;QACX,gBAAgB;QAChB,eAAe;QACf,SAAS;QACT,SAAS;IACb;IACA;QACI,gBAAgB;QAChB,wBAAwB;QACxB,sCAAsC;;QAEtC,YAAY;QACZ;qCAC6B;IACjC;;IAEA;QACI,YAAY;QACZ,kBAAkB;QAClB,oCAAoC;QACpC,YAAY;IAChB;IACA;QACI,YAAY;IAChB;EACF",sourcesContent:[".label-input {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n}\r\n\r\n.edit-label {\r\n    height: 30px;\r\n}\r\n\r\ntextarea {\r\n    resize: vertical;\r\n}\r\n\r\ninput, textarea, select {\r\n    padding: 5px;\r\n    border-radius: 5px;\r\n    border: 1px solid rgb(209, 209, 209);\r\n    /* border: none; */\r\n    height: 50px;\r\n}\r\n\r\n.edit-title-input {\r\n    display: grid;\r\n    place-items: center; \r\n}\r\n\r\n.editCreate-form {\r\n    /* min-height: 80%; */\r\n    width: 100%;\r\n    /* background: green; */\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr;\r\n    gap: 20px;\r\n} \r\n\r\n\r\n\r\n.submit-edit {\r\n    background: pink;\r\n    padding: 10px;\r\n    border-radius: 5px;\r\n}\r\n\r\n.editCreate-form > div:nth-child(2), .editCreate-form > div:first-child {\r\n    flex-direction: column;\r\n    display: flex;\r\n    gap: 20px;\r\n}\r\n\r\n.edit-details-input {\r\n    height: 100px;\r\n}\r\n\r\n.edit-window {\r\n    position: fixed;\r\n    width: min(700px, 90vw);\r\n    padding: 10px;\r\n    /* background: pink; */\r\n    background: whitesmoke;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    gap: 10px;\r\n    /* transform: translate(-50%, -50%) scale(1); */\r\n}\r\n\r\n.close-edit-button {\r\n    /* position: absolute;\r\n    top: 10px; */\r\n    background: none;\r\n    padding: 0;\r\n    top: 5px;\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .editCreate-form {\r\n        grid-template-columns: initial;\r\n        grid-template-rows: 1fr 1fr;\r\n        gap: 5px;\r\n    } \r\n\r\n    .close-edit-button {\r\n        /* background: rgb(204, 204, 204); */\r\n        color: grey;\r\n        background: none;\r\n        position: fixed;\r\n        top: 40px;\r\n        top: 10vh;\r\n    }\r\n    .edit-window {\r\n        border-radius: 0;\r\n        width: min(700px, 100vw);\r\n        height: max(800px, calc(100vh - 45px));\r\n\r\n        z-index: 100;\r\n        /* top: calc(50% - 45px);\r\n        height: calc(100vh - 45px); */\r\n    }\r\n\r\n    input, textarea, select {\r\n        padding: 5px;\r\n        border-radius: 5px;\r\n        border: 1px solid rgb(209, 209, 209);\r\n        height: 30px;\r\n    }\r\n    .edit-title-input {\r\n        height: 50px;\r\n    }\r\n  }\r\n\r\n\r\n  "],sourceRoot:""}]);const A=a},211:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,".project-window {\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) scale(1);\r\n    z-index: 20;\r\n\r\n    background: #f5f5f5;\r\n    width: min(500px, 80vw);\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    transition: 0.4s;\r\n    animation: displayEnter 0.4s;\r\n}\r\n\r\n\r\n\r\n@keyframes displayEnter {\r\n    0% {\r\n        opacity: 0;\r\n        top: 40%;\r\n        transform: translate(-50%, -50%) scale(1); \r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n\r\n.project-window form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n}\r\n\r\n.project-window input {\r\n    height: 40px;\r\n}\r\n\r\n.project-window p {\r\n    font-size: 20px;\r\n    font-weight: bolder;\r\n}\r\n\r\n.project-window div:first-child {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px\r\n}\r\n\r\n.project-window  form div:first-child {\r\n    gap: 10px;\r\n}\r\n\r\nform div:nth-child(2) {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 10px;\r\n}\r\n\r\n/* .project-window  button {\r\n    \r\n} */\r\n\r\n.submit-project {\r\n    background: pink;\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .project-window {\r\n        z-index: 50;\r\n    }\r\n}\r\n","",{version:3,sources:["webpack://./src/styles/projectWindow.css"],names:[],mappings:"AAAA;IACI,eAAe;IACf,QAAQ;IACR,SAAS;IACT,yCAAyC;IACzC,WAAW;;IAEX,mBAAmB;IACnB,uBAAuB;IACvB,aAAa;IACb,sBAAsB;IACtB,SAAS;IACT,aAAa;IACb,mBAAmB;IACnB,gBAAgB;IAChB,4BAA4B;AAChC;;;;AAIA;IACI;QACI,UAAU;QACV,QAAQ;QACR,yCAAyC;IAC7C;IACA;QACI,UAAU;IACd;AACJ;;;AAGA;IACI,aAAa;IACb,sBAAsB;IACtB,SAAS;AACb;;AAEA;IACI,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB;AACJ;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,aAAa;IACb,yBAAyB;IACzB,SAAS;AACb;;AAEA;;GAEG;;AAEH;IACI,gBAAgB;AACpB;;AAEA;IACI;QACI,WAAW;IACf;AACJ",sourcesContent:[".project-window {\r\n    position: fixed;\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%) scale(1);\r\n    z-index: 20;\r\n\r\n    background: #f5f5f5;\r\n    width: min(500px, 80vw);\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n    padding: 10px;\r\n    border-radius: 10px;\r\n    transition: 0.4s;\r\n    animation: displayEnter 0.4s;\r\n}\r\n\r\n\r\n\r\n@keyframes displayEnter {\r\n    0% {\r\n        opacity: 0;\r\n        top: 40%;\r\n        transform: translate(-50%, -50%) scale(1); \r\n    }\r\n    100% {\r\n        opacity: 1;\r\n    }\r\n}\r\n\r\n\r\n.project-window form {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 20px;\r\n}\r\n\r\n.project-window input {\r\n    height: 40px;\r\n}\r\n\r\n.project-window p {\r\n    font-size: 20px;\r\n    font-weight: bolder;\r\n}\r\n\r\n.project-window div:first-child {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 10px\r\n}\r\n\r\n.project-window  form div:first-child {\r\n    gap: 10px;\r\n}\r\n\r\nform div:nth-child(2) {\r\n    display: flex;\r\n    justify-content: flex-end;\r\n    gap: 10px;\r\n}\r\n\r\n/* .project-window  button {\r\n    \r\n} */\r\n\r\n.submit-project {\r\n    background: pink;\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .project-window {\r\n        z-index: 50;\r\n    }\r\n}\r\n"],sourceRoot:""}]);const A=a},772:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,":root {\r\n    --header-height: 50px;\r\n}\r\n\r\n:root.dark {\r\n    --header-background: black;\r\n    --header-color: white;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nh1,h2,h3,h4,h5,p,body, span {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.overlay {\r\n    backdrop-filter: blur(1px);\r\n    background-color: rgba(0, 10, 26, 0.801);\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    bottom: 0;\r\n    right: 0;\r\n    z-index: 10;\r\n    animation: closeOverlay 0.4s;    \r\n}\r\n\r\n\r\n.overlay-display-none {\r\n   height: 0;\r\n   width: 0;\r\n   animation: overlayExit 0.3s;\r\n   opacity: 0;\r\n}\r\n\r\n@keyframes overlayExit {\r\n    0% {\r\n        opacity: 1;\r\n        width: 100vw;\r\n        height: 100vh;\r\n    }\r\n\r\n    99% {\r\n        width: 100vw;\r\n        height: 100vh;  \r\n        opacity: 0;\r\n    }\r\n    100% {     \r\n        height: 0;\r\n        width: 0;\r\n    }\r\n}\r\n\r\n\r\n@keyframes closeOverlay {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    1% {\r\n        bottom: 0;\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n         opacity: 1;\r\n    }\r\n }\r\n\r\nbody {\r\n    min-height: 100%;\r\n    width: 100vw;\r\n    background-color: rgb(255, 255, 255);\r\n    font-family: sans-serif;\r\n    overflow: hidden;\r\n    -ms-overflow-style: none;  /* IE and Edge */\r\n    scrollbar-width: none;  /* Firefox */\r\n}\r\n\r\nbody::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n\r\n\r\n  ::-webkit-scrollbar {\r\n      width: 0px;\r\n  }\r\n  \r\n   \r\n  ::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n    border-radius: 10px;\r\n  }\r\n   \r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: rgb(255, 255, 255);\r\n    border: 1px solid rgb(181, 214, 172);\r\n    border-radius: 10px;\r\n  }\r\n\r\n\r\n\r\n  /* Hide scrollbar for IE, Edge and Firefox */\r\n\r\n\r\nheader {\r\n    width: 100vw;\r\n    height: var(--header-height);\r\n    background-color: rgb(238, 238, 238);\r\n    background: rgb(176, 240, 151);\r\n    /* background: rgb(253, 155, 155); */\r\n    /* background: rgb(122, 122, 122); */\r\n    background: pink;\r\n    background: #db4c3f;\r\n    color: white;\r\n    padding: 0 35px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    position: fixed;\r\n    top: 0;\r\n    /* z-index: 50; */\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n    font-size: 18px;\r\n}\r\n\r\nh1 {\r\n    font-size: 18px;\r\n}\r\n\r\nheader div:nth-child(2) {\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.content-header {\r\n    /* font-size: 20px; */\r\n    color:antiquewhite;\r\n    font-weight: 700;\r\n}\r\nnav {\r\n    position: fixed;\r\n    background: whitesmoke;\r\n    background-color: rgb(238, 238, 238);\r\n    background: #fafafa;\r\n    height: 100vh;\r\n    top: var(--header-height);\r\n    width: 250px;\r\n    left: 0;\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n    transition: 0.3s;\r\n    z-index: 0;\r\n}\r\n\r\nnav p {\r\n    font-size: 15px;\r\n    color: rgb(92, 92, 92);\r\n    font-weight: 100;\r\n}\r\n\r\n.nav-close {\r\n    left: -250px;\r\n}\r\n\r\n .content {\r\n    padding: 10px;\r\n    width: calc(100vw - 250px);\r\n    margin-left: 250px;\r\n    margin-top: var(--header-height);\r\n    height: calc(100vh - 36px);\r\n    /* min-height: 100vh; */\r\n    background: rgb(255, 253, 248);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 0px;\r\n    transition: 0.3s;\r\n    /* background: rgb(253, 249, 211); */\r\n\r\n}\r\n\r\n.content-expand {\r\n    width: 100vw;\r\n    margin-left: 0;\r\n}\r\n\r\n.todo-content {\r\n    width: 95%;\r\n    max-width: 70vw;\r\n    height: 90%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 10px;\r\n    padding: 2px 0;\r\n    overflow-y: scroll;\r\n    /* margin-bottom: 5px; */\r\n    /* background: rgb(245, 245, 245); */\r\n}\r\n\r\n.header-date, .header-time {\r\n    font-size: 10px;\r\n    font-weight: 800;\r\n    color:rgb(110, 110, 110);\r\n}\r\n\r\n\r\n.display-none {\r\n    position: fixed;\r\n    top: 40%;\r\n    transition: 0.4s;\r\n    opacity: 0;\r\n    /* animation: displayExit 0.4s;  */\r\n    transform:  scaleY(0);\r\n\r\n\r\n    top: 45%;\r\n}\r\n\r\n@keyframes displayExit {\r\n    0% {\r\n         transform: translate(-50%, -50%) scaleY(1);\r\n         opacity: 1;\r\n    }\r\n    70% {\r\n        opacity: 0;\r\n    }\r\n    99% {\r\n        transform: translate(-50%, -50%) scaleY(1);\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        transform: translate(-50%, -50%) scaleY(0); \r\n    }\r\n}\r\n\r\n\r\n.filter-blur {\r\n    filter: blur(1px);\r\n}\r\n\r\n\r\n\r\n.projects {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.projects > div:first-child {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding-left: 20px;\r\n}\r\n\r\n.projects > div:first-child {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.project-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1px;\r\n}\r\n\r\n\r\n\r\n.select-project {\r\n    height: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    transition: 0.3s;\r\n    border-radius: 5px;\r\n    padding: 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n.select-project:hover {\r\n    background: #ebe9e9;\r\n}\r\n\r\n.project-selected {\r\n    background-color: #ebe9e9\r\n}\r\n\r\n\r\n@media only screen and (max-width: 500px) {\r\n    :root {\r\n        --header-height: 40px;\r\n    }\r\n    .todo-content {\r\n        max-width: unset;\r\n    }\r\n    .content {\r\n        width: 100vw;\r\n        \r\n        margin-left: 0;\r\n        padding-left: 0;\r\n        padding-right: 0;\r\n        /* background: rgb(253, 249, 211); */\r\n    }\r\n\r\n    \r\n    .todo-item {\r\n        width: 100%;\r\n        font-size: 13px;\r\n        background: rgb(253, 249, 211);\r\n    }\r\n\r\n    nav {\r\n        width: 200px;\r\n        z-index: 40;\r\n    }\r\n    header {\r\n        padding-left: 5px;\r\n        padding-right: 5px;\r\n        z-index: 40;\r\n    }\r\n\r\n    .details-button {\r\n        display: none;\r\n    }\r\n  }\r\n\r\n\r\n","",{version:3,sources:["webpack://./src/styles/styles.css"],names:[],mappings:"AAAA;IACI,qBAAqB;AACzB;;AAEA;IACI,0BAA0B;IAC1B,qBAAqB;AACzB;;AAEA;IACI,sBAAsB;IACtB,SAAS;IACT,UAAU;AACd;;AAEA;IACI,SAAS;IACT,UAAU;AACd;;AAEA;IACI,0BAA0B;IAC1B,wCAAwC;IACxC,eAAe;IACf,MAAM;IACN,OAAO;IACP,YAAY;IACZ,aAAa;IACb,SAAS;IACT,QAAQ;IACR,WAAW;IACX,4BAA4B;AAChC;;;AAGA;GACG,SAAS;GACT,QAAQ;GACR,2BAA2B;GAC3B,UAAU;AACb;;AAEA;IACI;QACI,UAAU;QACV,YAAY;QACZ,aAAa;IACjB;;IAEA;QACI,YAAY;QACZ,aAAa;QACb,UAAU;IACd;IACA;QACI,SAAS;QACT,QAAQ;IACZ;AACJ;;;AAGA;IACI;QACI,UAAU;IACd;IACA;QACI,SAAS;QACT,UAAU;IACd;IACA;SACK,UAAU;IACf;CACH;;AAED;IACI,gBAAgB;IAChB,YAAY;IACZ,oCAAoC;IACpC,uBAAuB;IACvB,gBAAgB;IAChB,wBAAwB,GAAG,gBAAgB;IAC3C,qBAAqB,GAAG,YAAY;AACxC;;AAEA;IACI,aAAa;EACf;;;EAGA;MACI,UAAU;EACd;;;EAGA;IACE,4CAA4C;IAC5C,mBAAmB;EACrB;;EAEA;IACE,oCAAoC;IACpC,oCAAoC;IACpC,mBAAmB;EACrB;;;;EAIA,4CAA4C;;;AAG9C;IACI,YAAY;IACZ,4BAA4B;IAC5B,oCAAoC;IACpC,8BAA8B;IAC9B,oCAAoC;IACpC,oCAAoC;IACpC,gBAAgB;IAChB,mBAAmB;IACnB,YAAY;IACZ,eAAe;IACf,aAAa;IACb,8BAA8B;IAC9B,mBAAmB;IACnB,eAAe;IACf,MAAM;IACN,iBAAiB;IACjB,2CAA2C;IAC3C,eAAe;AACnB;;AAEA;IACI,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,mBAAmB;IACnB,uBAAuB;AAC3B;;AAEA;IACI,qBAAqB;IACrB,kBAAkB;IAClB,gBAAgB;AACpB;AACA;IACI,eAAe;IACf,sBAAsB;IACtB,oCAAoC;IACpC,mBAAmB;IACnB,aAAa;IACb,yBAAyB;IACzB,YAAY;IACZ,OAAO;IACP,aAAa;IACb,aAAa;IACb,sBAAsB;IACtB,QAAQ;IACR,2CAA2C;IAC3C,gBAAgB;IAChB,UAAU;AACd;;AAEA;IACI,eAAe;IACf,sBAAsB;IACtB,gBAAgB;AACpB;;AAEA;IACI,YAAY;AAChB;;CAEC;IACG,aAAa;IACb,0BAA0B;IAC1B,kBAAkB;IAClB,gCAAgC;IAChC,0BAA0B;IAC1B,uBAAuB;IACvB,8BAA8B;IAC9B,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,QAAQ;IACR,gBAAgB;IAChB,oCAAoC;;AAExC;;AAEA;IACI,YAAY;IACZ,cAAc;AAClB;;AAEA;IACI,UAAU;IACV,eAAe;IACf,WAAW;IACX,aAAa;IACb,sBAAsB;IACtB,mBAAmB;IACnB,SAAS;IACT,cAAc;IACd,kBAAkB;IAClB,wBAAwB;IACxB,oCAAoC;AACxC;;AAEA;IACI,eAAe;IACf,gBAAgB;IAChB,wBAAwB;AAC5B;;;AAGA;IACI,eAAe;IACf,QAAQ;IACR,gBAAgB;IAChB,UAAU;IACV,kCAAkC;IAClC,qBAAqB;;;IAGrB,QAAQ;AACZ;;AAEA;IACI;SACK,0CAA0C;SAC1C,UAAU;IACf;IACA;QACI,UAAU;IACd;IACA;QACI,0CAA0C;QAC1C,UAAU;IACd;IACA;QACI,0CAA0C;IAC9C;AACJ;;;AAGA;IACI,iBAAiB;AACrB;;;;AAIA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,8BAA8B;IAC9B,kBAAkB;AACtB;;AAEA;IACI,aAAa;IACb,mBAAmB;AACvB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,QAAQ;AACZ;;;;AAIA;IACI,YAAY;IACZ,aAAa;IACb,mBAAmB;IACnB,gBAAgB;IAChB,kBAAkB;IAClB,aAAa;IACb,eAAe;AACnB;;;AAGA;IACI,mBAAmB;AACvB;;AAEA;IACI;AACJ;;;AAGA;IACI;QACI,qBAAqB;IACzB;IACA;QACI,gBAAgB;IACpB;IACA;QACI,YAAY;;QAEZ,cAAc;QACd,eAAe;QACf,gBAAgB;QAChB,oCAAoC;IACxC;;;IAGA;QACI,WAAW;QACX,eAAe;QACf,8BAA8B;IAClC;;IAEA;QACI,YAAY;QACZ,WAAW;IACf;IACA;QACI,iBAAiB;QACjB,kBAAkB;QAClB,WAAW;IACf;;IAEA;QACI,aAAa;IACjB;EACF",sourcesContent:[":root {\r\n    --header-height: 50px;\r\n}\r\n\r\n:root.dark {\r\n    --header-background: black;\r\n    --header-color: white;\r\n}\r\n\r\n* {\r\n    box-sizing: border-box;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\nh1,h2,h3,h4,h5,p,body, span {\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\n\r\n.overlay {\r\n    backdrop-filter: blur(1px);\r\n    background-color: rgba(0, 10, 26, 0.801);\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100vw;\r\n    height: 100vh;\r\n    bottom: 0;\r\n    right: 0;\r\n    z-index: 10;\r\n    animation: closeOverlay 0.4s;    \r\n}\r\n\r\n\r\n.overlay-display-none {\r\n   height: 0;\r\n   width: 0;\r\n   animation: overlayExit 0.3s;\r\n   opacity: 0;\r\n}\r\n\r\n@keyframes overlayExit {\r\n    0% {\r\n        opacity: 1;\r\n        width: 100vw;\r\n        height: 100vh;\r\n    }\r\n\r\n    99% {\r\n        width: 100vw;\r\n        height: 100vh;  \r\n        opacity: 0;\r\n    }\r\n    100% {     \r\n        height: 0;\r\n        width: 0;\r\n    }\r\n}\r\n\r\n\r\n@keyframes closeOverlay {\r\n    0% {\r\n        opacity: 0;\r\n    }\r\n    1% {\r\n        bottom: 0;\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n         opacity: 1;\r\n    }\r\n }\r\n\r\nbody {\r\n    min-height: 100%;\r\n    width: 100vw;\r\n    background-color: rgb(255, 255, 255);\r\n    font-family: sans-serif;\r\n    overflow: hidden;\r\n    -ms-overflow-style: none;  /* IE and Edge */\r\n    scrollbar-width: none;  /* Firefox */\r\n}\r\n\r\nbody::-webkit-scrollbar {\r\n    display: none;\r\n  }\r\n\r\n\r\n  ::-webkit-scrollbar {\r\n      width: 0px;\r\n  }\r\n  \r\n   \r\n  ::-webkit-scrollbar-track {\r\n    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n    border-radius: 10px;\r\n  }\r\n   \r\n  ::-webkit-scrollbar-thumb {\r\n    background-color: rgb(255, 255, 255);\r\n    border: 1px solid rgb(181, 214, 172);\r\n    border-radius: 10px;\r\n  }\r\n\r\n\r\n\r\n  /* Hide scrollbar for IE, Edge and Firefox */\r\n\r\n\r\nheader {\r\n    width: 100vw;\r\n    height: var(--header-height);\r\n    background-color: rgb(238, 238, 238);\r\n    background: rgb(176, 240, 151);\r\n    /* background: rgb(253, 155, 155); */\r\n    /* background: rgb(122, 122, 122); */\r\n    background: pink;\r\n    background: #db4c3f;\r\n    color: white;\r\n    padding: 0 35px;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    position: fixed;\r\n    top: 0;\r\n    /* z-index: 50; */\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n    font-size: 18px;\r\n}\r\n\r\nh1 {\r\n    font-size: 18px;\r\n}\r\n\r\nheader div:nth-child(2) {\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n    justify-content: center;\r\n}\r\n\r\n.content-header {\r\n    /* font-size: 20px; */\r\n    color:antiquewhite;\r\n    font-weight: 700;\r\n}\r\nnav {\r\n    position: fixed;\r\n    background: whitesmoke;\r\n    background-color: rgb(238, 238, 238);\r\n    background: #fafafa;\r\n    height: 100vh;\r\n    top: var(--header-height);\r\n    width: 250px;\r\n    left: 0;\r\n    padding: 20px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 5px;\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n    transition: 0.3s;\r\n    z-index: 0;\r\n}\r\n\r\nnav p {\r\n    font-size: 15px;\r\n    color: rgb(92, 92, 92);\r\n    font-weight: 100;\r\n}\r\n\r\n.nav-close {\r\n    left: -250px;\r\n}\r\n\r\n .content {\r\n    padding: 10px;\r\n    width: calc(100vw - 250px);\r\n    margin-left: 250px;\r\n    margin-top: var(--header-height);\r\n    height: calc(100vh - 36px);\r\n    /* min-height: 100vh; */\r\n    background: rgb(255, 253, 248);\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 0px;\r\n    transition: 0.3s;\r\n    /* background: rgb(253, 249, 211); */\r\n\r\n}\r\n\r\n.content-expand {\r\n    width: 100vw;\r\n    margin-left: 0;\r\n}\r\n\r\n.todo-content {\r\n    width: 95%;\r\n    max-width: 70vw;\r\n    height: 90%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    gap: 10px;\r\n    padding: 2px 0;\r\n    overflow-y: scroll;\r\n    /* margin-bottom: 5px; */\r\n    /* background: rgb(245, 245, 245); */\r\n}\r\n\r\n.header-date, .header-time {\r\n    font-size: 10px;\r\n    font-weight: 800;\r\n    color:rgb(110, 110, 110);\r\n}\r\n\r\n\r\n.display-none {\r\n    position: fixed;\r\n    top: 40%;\r\n    transition: 0.4s;\r\n    opacity: 0;\r\n    /* animation: displayExit 0.4s;  */\r\n    transform:  scaleY(0);\r\n\r\n\r\n    top: 45%;\r\n}\r\n\r\n@keyframes displayExit {\r\n    0% {\r\n         transform: translate(-50%, -50%) scaleY(1);\r\n         opacity: 1;\r\n    }\r\n    70% {\r\n        opacity: 0;\r\n    }\r\n    99% {\r\n        transform: translate(-50%, -50%) scaleY(1);\r\n        opacity: 0;\r\n    }\r\n    100% {\r\n        transform: translate(-50%, -50%) scaleY(0); \r\n    }\r\n}\r\n\r\n\r\n.filter-blur {\r\n    filter: blur(1px);\r\n}\r\n\r\n\r\n\r\n.projects {\r\n    display: flex;\r\n    flex-direction: column;\r\n}\r\n\r\n.projects > div:first-child {\r\n    display: flex;\r\n    justify-content: space-between;\r\n    padding-left: 20px;\r\n}\r\n\r\n.projects > div:first-child {\r\n    display: flex;\r\n    align-items: center;\r\n}\r\n\r\n.project-list {\r\n    display: flex;\r\n    flex-direction: column;\r\n    gap: 1px;\r\n}\r\n\r\n\r\n\r\n.select-project {\r\n    height: 30px;\r\n    display: flex;\r\n    align-items: center;\r\n    transition: 0.3s;\r\n    border-radius: 5px;\r\n    padding: 20px;\r\n    cursor: pointer;\r\n}\r\n\r\n\r\n.select-project:hover {\r\n    background: #ebe9e9;\r\n}\r\n\r\n.project-selected {\r\n    background-color: #ebe9e9\r\n}\r\n\r\n\r\n@media only screen and (max-width: 500px) {\r\n    :root {\r\n        --header-height: 40px;\r\n    }\r\n    .todo-content {\r\n        max-width: unset;\r\n    }\r\n    .content {\r\n        width: 100vw;\r\n        \r\n        margin-left: 0;\r\n        padding-left: 0;\r\n        padding-right: 0;\r\n        /* background: rgb(253, 249, 211); */\r\n    }\r\n\r\n    \r\n    .todo-item {\r\n        width: 100%;\r\n        font-size: 13px;\r\n        background: rgb(253, 249, 211);\r\n    }\r\n\r\n    nav {\r\n        width: 200px;\r\n        z-index: 40;\r\n    }\r\n    header {\r\n        padding-left: 5px;\r\n        padding-right: 5px;\r\n        z-index: 40;\r\n    }\r\n\r\n    .details-button {\r\n        display: none;\r\n    }\r\n  }\r\n\r\n\r\n"],sourceRoot:""}]);const A=a},430:(n,r,e)=>{e.d(r,{Z:()=>A});var t=e(537),o=e.n(t),i=e(645),a=e.n(i)()(o());a.push([n.id,".todo-item {\r\n    transition: 0.2s;\r\n    font-weight: 200;\r\n    width: 95%;\r\n    height: 40px;\r\n    /* display: flex; */\r\n    /* align-items: center; */\r\n    /* justify-content: space-between; */\r\n    border-radius: 5px;\r\n    padding: 10px;\r\n    /* border-bottom: 1.5px solid rgb(171, 241, 171); */\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n\r\n    /* background: white; */\r\n\r\n    /* opacity: 0.3; */\r\n\r\n    display: grid;\r\n    grid-template-columns: 4fr 1fr;\r\n    /* align-items: center; */\r\n    align-content: center;\r\n    /* grid-template-columns: 5px 50px 5px 5px 5px 5px; */\r\n\r\n}\r\n\r\n.todo-item:hover {\r\n    /* box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px; */\r\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\r\n    border-radius: 5px;\r\n    /* border-bottom: 1.5px solid white; */\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item div {\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n}\r\n\r\n.todo-item div:nth-child(2) {\r\n    gap: 20px;\r\n}\r\n\r\n.date {\r\n    font-size: 10px;\r\n    color: #db4c3f;\r\n}\r\n\r\n.title {\r\n   \r\n}\r\n\r\n.task-complete {\r\n\r\n}\r\n\r\n\r\n.add-task {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 5px;\r\n    /* align-self: flex-start; */\r\n    color: grey;\r\n}\r\n\r\n.add-task:hover {\r\n    color: #db4c3f;\r\n    background: initial;\r\n}\r\n\r\n\r\n.title {\r\n    /* background: blanchedalmond; */\r\n    width: 100%;\r\n    height: 70%;\r\n    display: flex;\r\n    align-items: center;\r\n    text-overflow: ellipsis;\r\n    /* text-decoration: line-through; */\r\n    /* opacity: 0.5; */\r\n}\r\n\r\n.edit-button {\r\n    height: 20px;\r\n\r\n    /* background: red; */\r\n    /* z-index: 20; */\r\n}\r\n\r\n.edit-button:hover {\r\n    /* background: #ebe9e9; */\r\n   \r\n}\r\n\r\n.details-button {\r\n    /* background-color: blue; */\r\n    /* z-index: 20; */\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .todo-item div:nth-child(2) {\r\n        gap: 10px;\r\n    }\r\n  }","",{version:3,sources:["webpack://./src/styles/taskComponent.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,gBAAgB;IAChB,UAAU;IACV,YAAY;IACZ,mBAAmB;IACnB,yBAAyB;IACzB,oCAAoC;IACpC,kBAAkB;IAClB,aAAa;IACb,mDAAmD;IACnD,2CAA2C;;IAE3C,uBAAuB;;IAEvB,kBAAkB;;IAElB,aAAa;IACb,8BAA8B;IAC9B,yBAAyB;IACzB,qBAAqB;IACrB,qDAAqD;;AAEzD;;AAEA;IACI,iDAAiD;IACjD,2CAA2C;IAC3C,kBAAkB;IAClB,sCAAsC;IACtC,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,SAAS;IACT,mBAAmB;AACvB;;AAEA;IACI,SAAS;AACb;;AAEA;IACI,eAAe;IACf,cAAc;AAClB;;AAEA;;AAEA;;AAEA;;AAEA;;;AAGA;IACI,aAAa;IACb,mBAAmB;IACnB,QAAQ;IACR,4BAA4B;IAC5B,WAAW;AACf;;AAEA;IACI,cAAc;IACd,mBAAmB;AACvB;;;AAGA;IACI,gCAAgC;IAChC,WAAW;IACX,WAAW;IACX,aAAa;IACb,mBAAmB;IACnB,uBAAuB;IACvB,mCAAmC;IACnC,kBAAkB;AACtB;;AAEA;IACI,YAAY;;IAEZ,qBAAqB;IACrB,iBAAiB;AACrB;;AAEA;IACI,yBAAyB;;AAE7B;;AAEA;IACI,4BAA4B;IAC5B,iBAAiB;AACrB;;AAEA;IACI;QACI,SAAS;IACb;EACF",sourcesContent:[".todo-item {\r\n    transition: 0.2s;\r\n    font-weight: 200;\r\n    width: 95%;\r\n    height: 40px;\r\n    /* display: flex; */\r\n    /* align-items: center; */\r\n    /* justify-content: space-between; */\r\n    border-radius: 5px;\r\n    padding: 10px;\r\n    /* border-bottom: 1.5px solid rgb(171, 241, 171); */\r\n    box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n\r\n    /* background: white; */\r\n\r\n    /* opacity: 0.3; */\r\n\r\n    display: grid;\r\n    grid-template-columns: 4fr 1fr;\r\n    /* align-items: center; */\r\n    align-content: center;\r\n    /* grid-template-columns: 5px 50px 5px 5px 5px 5px; */\r\n\r\n}\r\n\r\n.todo-item:hover {\r\n    /* box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px; */\r\n    box-shadow: rgba(0, 0, 0, 0.24) 0px 3px 8px;\r\n    border-radius: 5px;\r\n    /* border-bottom: 1.5px solid white; */\r\n    cursor: pointer;\r\n}\r\n\r\n.todo-item div {\r\n    display: flex;\r\n    gap: 10px;\r\n    align-items: center;\r\n}\r\n\r\n.todo-item div:nth-child(2) {\r\n    gap: 20px;\r\n}\r\n\r\n.date {\r\n    font-size: 10px;\r\n    color: #db4c3f;\r\n}\r\n\r\n.title {\r\n   \r\n}\r\n\r\n.task-complete {\r\n\r\n}\r\n\r\n\r\n.add-task {\r\n    display: flex;\r\n    align-items: center;\r\n    gap: 5px;\r\n    /* align-self: flex-start; */\r\n    color: grey;\r\n}\r\n\r\n.add-task:hover {\r\n    color: #db4c3f;\r\n    background: initial;\r\n}\r\n\r\n\r\n.title {\r\n    /* background: blanchedalmond; */\r\n    width: 100%;\r\n    height: 70%;\r\n    display: flex;\r\n    align-items: center;\r\n    text-overflow: ellipsis;\r\n    /* text-decoration: line-through; */\r\n    /* opacity: 0.5; */\r\n}\r\n\r\n.edit-button {\r\n    height: 20px;\r\n\r\n    /* background: red; */\r\n    /* z-index: 20; */\r\n}\r\n\r\n.edit-button:hover {\r\n    /* background: #ebe9e9; */\r\n   \r\n}\r\n\r\n.details-button {\r\n    /* background-color: blue; */\r\n    /* z-index: 20; */\r\n}\r\n\r\n@media only screen and (max-width: 500px) {\r\n    .todo-item div:nth-child(2) {\r\n        gap: 10px;\r\n    }\r\n  }"],sourceRoot:""}]);const A=a},645:n=>{n.exports=function(n){var r=[];return r.toString=function(){return this.map((function(r){var e="",t=void 0!==r[5];return r[4]&&(e+="@supports (".concat(r[4],") {")),r[2]&&(e+="@media ".concat(r[2]," {")),t&&(e+="@layer".concat(r[5].length>0?" ".concat(r[5]):""," {")),e+=n(r),t&&(e+="}"),r[2]&&(e+="}"),r[4]&&(e+="}"),e})).join("")},r.i=function(n,e,t,o,i){"string"==typeof n&&(n=[[null,n,void 0]]);var a={};if(t)for(var A=0;A<this.length;A++){var d=this[A][0];null!=d&&(a[d]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);t&&a[l[0]]||(void 0!==i&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=i),e&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=e):l[2]=e),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),r.push(l))}},r}},537:n=>{n.exports=function(n){var r=n[1],e=n[3];if(!e)return r;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(e)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),i="/*# ".concat(o," */"),a=e.sources.map((function(n){return"/*# sourceURL=".concat(e.sourceRoot||"").concat(n," */")}));return[r].concat(a).concat([i]).join("\n")}return[r].join("\n")}},379:n=>{var r=[];function e(n){for(var e=-1,t=0;t<r.length;t++)if(r[t].identifier===n){e=t;break}return e}function t(n,t){for(var i={},a=[],A=0;A<n.length;A++){var d=n[A],s=t.base?d[0]+t.base:d[0],l=i[s]||0,c="".concat(s," ").concat(l);i[s]=l+1;var u=e(c),p={css:d[1],media:d[2],sourceMap:d[3],supports:d[4],layer:d[5]};if(-1!==u)r[u].references++,r[u].updater(p);else{var g=o(p,t);t.byIndex=A,r.splice(A,0,{identifier:c,updater:g,references:1})}a.push(c)}return a}function o(n,r){var e=r.domAPI(r);return e.update(n),function(r){if(r){if(r.css===n.css&&r.media===n.media&&r.sourceMap===n.sourceMap&&r.supports===n.supports&&r.layer===n.layer)return;e.update(n=r)}else e.remove()}}n.exports=function(n,o){var i=t(n=n||[],o=o||{});return function(n){n=n||[];for(var a=0;a<i.length;a++){var A=e(i[a]);r[A].references--}for(var d=t(n,o),s=0;s<i.length;s++){var l=e(i[s]);0===r[l].references&&(r[l].updater(),r.splice(l,1))}i=d}}},569:n=>{var r={};n.exports=function(n,e){var t=function(n){if(void 0===r[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}r[n]=e}return r[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(e)}},216:n=>{n.exports=function(n){var r=document.createElement("style");return n.setAttributes(r,n.attributes),n.insert(r,n.options),r}},565:(n,r,e)=>{n.exports=function(n){var r=e.nc;r&&n.setAttribute("nonce",r)}},795:n=>{n.exports=function(n){var r=n.insertStyleElement(n);return{update:function(e){!function(n,r,e){var t="";e.supports&&(t+="@supports (".concat(e.supports,") {")),e.media&&(t+="@media ".concat(e.media," {"));var o=void 0!==e.layer;o&&(t+="@layer".concat(e.layer.length>0?" ".concat(e.layer):""," {")),t+=e.css,o&&(t+="}"),e.media&&(t+="}"),e.supports&&(t+="}");var i=e.sourceMap;i&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),r.styleTagTransform(t,n,r.options)}(r,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(r)}}}},589:n=>{n.exports=function(n,r){if(r.styleSheet)r.styleSheet.cssText=n;else{for(;r.firstChild;)r.removeChild(r.firstChild);r.appendChild(document.createTextNode(n))}}}},r={};function e(t){var o=r[t];if(void 0!==o)return o.exports;var i=r[t]={id:t,exports:{}};return n[t](i,i.exports,e),i.exports}e.n=n=>{var r=n&&n.__esModule?()=>n.default:()=>n;return e.d(r,{a:r}),r},e.d=(n,r)=>{for(var t in r)e.o(r,t)&&!e.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:r[t]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,r)=>Object.prototype.hasOwnProperty.call(n,r),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var r=e.g.document;if(!n&&r&&(r.currentScript&&(n=r.currentScript.src),!n)){var t=r.getElementsByTagName("script");t.length&&(n=t[t.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.nc=void 0;var t={};(()=>{function n(n,r){if(r.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+r.length+" present")}function r(r){return n(1,arguments),r instanceof Date||"object"==typeof r&&"[object Date]"===Object.prototype.toString.call(r)}function o(r){n(1,arguments);var e=Object.prototype.toString.call(r);return r instanceof Date||"object"==typeof r&&"[object Date]"===e?new Date(r.getTime()):"number"==typeof r||"[object Number]"===e?new Date(r):("string"!=typeof r&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function i(e){if(n(1,arguments),!r(e)&&"number"!=typeof e)return!1;var t=o(e);return!isNaN(Number(t))}function a(n){if(null===n||!0===n||!1===n)return NaN;var r=Number(n);return isNaN(r)?r:r<0?Math.ceil(r):Math.floor(r)}function A(r,e){n(2,arguments);var t=o(r).getTime(),i=a(e);return new Date(t+i)}function d(r,e){n(2,arguments);var t=a(e);return A(r,-t)}e.d(t,{M:()=>Ir});var s=864e5;function l(r){n(1,arguments);var e=1,t=o(r),i=t.getUTCDay(),a=(i<e?7:0)+i-e;return t.setUTCDate(t.getUTCDate()-a),t.setUTCHours(0,0,0,0),t}function c(r){n(1,arguments);var e=o(r),t=e.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(t+1,0,4),i.setUTCHours(0,0,0,0);var a=l(i),A=new Date(0);A.setUTCFullYear(t,0,4),A.setUTCHours(0,0,0,0);var d=l(A);return e.getTime()>=a.getTime()?t+1:e.getTime()>=d.getTime()?t:t-1}function u(r){n(1,arguments);var e=c(r),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var o=l(t);return o}var p=6048e5,g={};function h(){return g}function C(r,e){var t,i,A,d,s,l,c,u;n(1,arguments);var p=h(),g=a(null!==(t=null!==(i=null!==(A=null!==(d=null==e?void 0:e.weekStartsOn)&&void 0!==d?d:null==e||null===(s=e.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.weekStartsOn)&&void 0!==A?A:p.weekStartsOn)&&void 0!==i?i:null===(c=p.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==t?t:0);if(!(g>=0&&g<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var C=o(r),m=C.getUTCDay(),f=(m<g?7:0)+m-g;return C.setUTCDate(C.getUTCDate()-f),C.setUTCHours(0,0,0,0),C}function m(r,e){var t,i,A,d,s,l,c,u;n(1,arguments);var p=o(r),g=p.getUTCFullYear(),m=h(),f=a(null!==(t=null!==(i=null!==(A=null!==(d=null==e?void 0:e.firstWeekContainsDate)&&void 0!==d?d:null==e||null===(s=e.locale)||void 0===s||null===(l=s.options)||void 0===l?void 0:l.firstWeekContainsDate)&&void 0!==A?A:m.firstWeekContainsDate)&&void 0!==i?i:null===(c=m.locale)||void 0===c||null===(u=c.options)||void 0===u?void 0:u.firstWeekContainsDate)&&void 0!==t?t:1);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var b=new Date(0);b.setUTCFullYear(g+1,0,f),b.setUTCHours(0,0,0,0);var x=C(b,e),I=new Date(0);I.setUTCFullYear(g,0,f),I.setUTCHours(0,0,0,0);var w=C(I,e);return p.getTime()>=x.getTime()?g+1:p.getTime()>=w.getTime()?g:g-1}function f(r,e){var t,o,i,A,d,s,l,c;n(1,arguments);var u=h(),p=a(null!==(t=null!==(o=null!==(i=null!==(A=null==e?void 0:e.firstWeekContainsDate)&&void 0!==A?A:null==e||null===(d=e.locale)||void 0===d||null===(s=d.options)||void 0===s?void 0:s.firstWeekContainsDate)&&void 0!==i?i:u.firstWeekContainsDate)&&void 0!==o?o:null===(l=u.locale)||void 0===l||null===(c=l.options)||void 0===c?void 0:c.firstWeekContainsDate)&&void 0!==t?t:1),g=m(r,e),f=new Date(0);f.setUTCFullYear(g,0,p),f.setUTCHours(0,0,0,0);var b=C(f,e);return b}var b=6048e5;function x(n,r){for(var e=n<0?"-":"",t=Math.abs(n).toString();t.length<r;)t="0"+t;return e+t}const I=function(n,r){var e=n.getUTCFullYear(),t=e>0?e:1-e;return x("yy"===r?t%100:t,r.length)},w=function(n,r){var e=n.getUTCMonth();return"M"===r?String(e+1):x(e+1,2)},B=function(n,r){return x(n.getUTCDate(),r.length)},y=function(n,r){return x(n.getUTCHours()%12||12,r.length)},v=function(n,r){return x(n.getUTCHours(),r.length)},k=function(n,r){return x(n.getUTCMinutes(),r.length)},E=function(n,r){return x(n.getUTCSeconds(),r.length)},T=function(n,r){var e=r.length,t=n.getUTCMilliseconds();return x(Math.floor(t*Math.pow(10,e-3)),r.length)};var S={G:function(n,r,e){var t=n.getUTCFullYear()>0?1:0;switch(r){case"G":case"GG":case"GGG":return e.era(t,{width:"abbreviated"});case"GGGGG":return e.era(t,{width:"narrow"});default:return e.era(t,{width:"wide"})}},y:function(n,r,e){if("yo"===r){var t=n.getUTCFullYear(),o=t>0?t:1-t;return e.ordinalNumber(o,{unit:"year"})}return I(n,r)},Y:function(n,r,e,t){var o=m(n,t),i=o>0?o:1-o;return"YY"===r?x(i%100,2):"Yo"===r?e.ordinalNumber(i,{unit:"year"}):x(i,r.length)},R:function(n,r){return x(c(n),r.length)},u:function(n,r){return x(n.getUTCFullYear(),r.length)},Q:function(n,r,e){var t=Math.ceil((n.getUTCMonth()+1)/3);switch(r){case"Q":return String(t);case"QQ":return x(t,2);case"Qo":return e.ordinalNumber(t,{unit:"quarter"});case"QQQ":return e.quarter(t,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(t,{width:"narrow",context:"formatting"});default:return e.quarter(t,{width:"wide",context:"formatting"})}},q:function(n,r,e){var t=Math.ceil((n.getUTCMonth()+1)/3);switch(r){case"q":return String(t);case"qq":return x(t,2);case"qo":return e.ordinalNumber(t,{unit:"quarter"});case"qqq":return e.quarter(t,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(t,{width:"narrow",context:"standalone"});default:return e.quarter(t,{width:"wide",context:"standalone"})}},M:function(n,r,e){var t=n.getUTCMonth();switch(r){case"M":case"MM":return w(n,r);case"Mo":return e.ordinalNumber(t+1,{unit:"month"});case"MMM":return e.month(t,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(t,{width:"narrow",context:"formatting"});default:return e.month(t,{width:"wide",context:"formatting"})}},L:function(n,r,e){var t=n.getUTCMonth();switch(r){case"L":return String(t+1);case"LL":return x(t+1,2);case"Lo":return e.ordinalNumber(t+1,{unit:"month"});case"LLL":return e.month(t,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(t,{width:"narrow",context:"standalone"});default:return e.month(t,{width:"wide",context:"standalone"})}},w:function(r,e,t,i){var a=function(r,e){n(1,arguments);var t=o(r),i=C(t,e).getTime()-f(t,e).getTime();return Math.round(i/b)+1}(r,i);return"wo"===e?t.ordinalNumber(a,{unit:"week"}):x(a,e.length)},I:function(r,e,t){var i=function(r){n(1,arguments);var e=o(r),t=l(e).getTime()-u(e).getTime();return Math.round(t/p)+1}(r);return"Io"===e?t.ordinalNumber(i,{unit:"week"}):x(i,e.length)},d:function(n,r,e){return"do"===r?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):B(n,r)},D:function(r,e,t){var i=function(r){n(1,arguments);var e=o(r),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var i=e.getTime(),a=t-i;return Math.floor(a/s)+1}(r);return"Do"===e?t.ordinalNumber(i,{unit:"dayOfYear"}):x(i,e.length)},E:function(n,r,e){var t=n.getUTCDay();switch(r){case"E":case"EE":case"EEE":return e.day(t,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(t,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(t,{width:"short",context:"formatting"});default:return e.day(t,{width:"wide",context:"formatting"})}},e:function(n,r,e,t){var o=n.getUTCDay(),i=(o-t.weekStartsOn+8)%7||7;switch(r){case"e":return String(i);case"ee":return x(i,2);case"eo":return e.ordinalNumber(i,{unit:"day"});case"eee":return e.day(o,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(o,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(o,{width:"short",context:"formatting"});default:return e.day(o,{width:"wide",context:"formatting"})}},c:function(n,r,e,t){var o=n.getUTCDay(),i=(o-t.weekStartsOn+8)%7||7;switch(r){case"c":return String(i);case"cc":return x(i,r.length);case"co":return e.ordinalNumber(i,{unit:"day"});case"ccc":return e.day(o,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(o,{width:"narrow",context:"standalone"});case"cccccc":return e.day(o,{width:"short",context:"standalone"});default:return e.day(o,{width:"wide",context:"standalone"})}},i:function(n,r,e){var t=n.getUTCDay(),o=0===t?7:t;switch(r){case"i":return String(o);case"ii":return x(o,r.length);case"io":return e.ordinalNumber(o,{unit:"day"});case"iii":return e.day(t,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(t,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(t,{width:"short",context:"formatting"});default:return e.day(t,{width:"wide",context:"formatting"})}},a:function(n,r,e){var t=n.getUTCHours()/12>=1?"pm":"am";switch(r){case"a":case"aa":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(t,{width:"narrow",context:"formatting"});default:return e.dayPeriod(t,{width:"wide",context:"formatting"})}},b:function(n,r,e){var t,o=n.getUTCHours();switch(t=12===o?"noon":0===o?"midnight":o/12>=1?"pm":"am",r){case"b":case"bb":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(t,{width:"narrow",context:"formatting"});default:return e.dayPeriod(t,{width:"wide",context:"formatting"})}},B:function(n,r,e){var t,o=n.getUTCHours();switch(t=o>=17?"evening":o>=12?"afternoon":o>=4?"morning":"night",r){case"B":case"BB":case"BBB":return e.dayPeriod(t,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(t,{width:"narrow",context:"formatting"});default:return e.dayPeriod(t,{width:"wide",context:"formatting"})}},h:function(n,r,e){if("ho"===r){var t=n.getUTCHours()%12;return 0===t&&(t=12),e.ordinalNumber(t,{unit:"hour"})}return y(n,r)},H:function(n,r,e){return"Ho"===r?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):v(n,r)},K:function(n,r,e){var t=n.getUTCHours()%12;return"Ko"===r?e.ordinalNumber(t,{unit:"hour"}):x(t,r.length)},k:function(n,r,e){var t=n.getUTCHours();return 0===t&&(t=24),"ko"===r?e.ordinalNumber(t,{unit:"hour"}):x(t,r.length)},m:function(n,r,e){return"mo"===r?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):k(n,r)},s:function(n,r,e){return"so"===r?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):E(n,r)},S:function(n,r){return T(n,r)},X:function(n,r,e,t){var o=(t._originalDate||n).getTimezoneOffset();if(0===o)return"Z";switch(r){case"X":return U(o);case"XXXX":case"XX":return Y(o);default:return Y(o,":")}},x:function(n,r,e,t){var o=(t._originalDate||n).getTimezoneOffset();switch(r){case"x":return U(o);case"xxxx":case"xx":return Y(o);default:return Y(o,":")}},O:function(n,r,e,t){var o=(t._originalDate||n).getTimezoneOffset();switch(r){case"O":case"OO":case"OOO":return"GMT"+j(o,":");default:return"GMT"+Y(o,":")}},z:function(n,r,e,t){var o=(t._originalDate||n).getTimezoneOffset();switch(r){case"z":case"zz":case"zzz":return"GMT"+j(o,":");default:return"GMT"+Y(o,":")}},t:function(n,r,e,t){var o=t._originalDate||n;return x(Math.floor(o.getTime()/1e3),r.length)},T:function(n,r,e,t){return x((t._originalDate||n).getTime(),r.length)}};function j(n,r){var e=n>0?"-":"+",t=Math.abs(n),o=Math.floor(t/60),i=t%60;if(0===i)return e+String(o);var a=r||"";return e+String(o)+a+x(i,2)}function U(n,r){return n%60==0?(n>0?"-":"+")+x(Math.abs(n)/60,2):Y(n,r)}function Y(n,r){var e=r||"",t=n>0?"-":"+",o=Math.abs(n);return t+x(Math.floor(o/60),2)+e+x(o%60,2)}const Q=S;var D=function(n,r){switch(n){case"P":return r.date({width:"short"});case"PP":return r.date({width:"medium"});case"PPP":return r.date({width:"long"});default:return r.date({width:"full"})}},M=function(n,r){switch(n){case"p":return r.time({width:"short"});case"pp":return r.time({width:"medium"});case"ppp":return r.time({width:"long"});default:return r.time({width:"full"})}};const q={p:M,P:function(n,r){var e,t=n.match(/(P+)(p+)?/)||[],o=t[1],i=t[2];if(!i)return D(n,r);switch(o){case"P":e=r.dateTime({width:"short"});break;case"PP":e=r.dateTime({width:"medium"});break;case"PPP":e=r.dateTime({width:"long"});break;default:e=r.dateTime({width:"full"})}return e.replace("{{date}}",D(o,r)).replace("{{time}}",M(i,r))}};function W(n){var r=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return r.setUTCFullYear(n.getFullYear()),n.getTime()-r.getTime()}var z=["D","DD"],P=["YY","YYYY"];function L(n){return-1!==z.indexOf(n)}function Z(n){return-1!==P.indexOf(n)}function O(n,r,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(r,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(r,"`) for formatting years to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(r,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(r,"`) for formatting days of the month to the input `").concat(e,"`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md"))}var F={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function G(n){return function(){var r=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=r.width?String(r.width):n.defaultWidth,t=n.formats[e]||n.formats[n.defaultWidth];return t}}const N={date:G({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:G({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:G({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var H={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function R(n){return function(r,e){var t;if("formatting"===(null!=e&&e.context?String(e.context):"standalone")&&n.formattingValues){var o=n.defaultFormattingWidth||n.defaultWidth,i=null!=e&&e.width?String(e.width):o;t=n.formattingValues[i]||n.formattingValues[o]}else{var a=n.defaultWidth,A=null!=e&&e.width?String(e.width):n.defaultWidth;t=n.values[A]||n.values[a]}return t[n.argumentCallback?n.argumentCallback(r):r]}}const X={ordinalNumber:function(n,r){var e=Number(n),t=e%100;if(t>20||t<10)switch(t%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:R({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:R({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return n-1}}),month:R({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:R({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:R({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function J(n){return function(r){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=e.width,o=t&&n.matchPatterns[t]||n.matchPatterns[n.defaultMatchWidth],i=r.match(o);if(!i)return null;var a,A=i[0],d=t&&n.parsePatterns[t]||n.parsePatterns[n.defaultParseWidth],s=Array.isArray(d)?_(d,(function(n){return n.test(A)})):V(d,(function(n){return n.test(A)}));a=n.valueCallback?n.valueCallback(s):s,a=e.valueCallback?e.valueCallback(a):a;var l=r.slice(A.length);return{value:a,rest:l}}}function V(n,r){for(var e in n)if(n.hasOwnProperty(e)&&r(n[e]))return e}function _(n,r){for(var e=0;e<n.length;e++)if(r(n[e]))return e}var $,K={ordinalNumber:($={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match($.matchPattern);if(!e)return null;var t=e[0],o=n.match($.parsePattern);if(!o)return null;var i=$.valueCallback?$.valueCallback(o[0]):o[0];i=r.valueCallback?r.valueCallback(i):i;var a=n.slice(t.length);return{value:i,rest:a}}),era:J({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:J({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:J({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:J({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:J({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})};const nn={code:"en-US",formatDistance:function(n,r,e){var t,o=F[n];return t="string"==typeof o?o:1===r?o.one:o.other.replace("{{count}}",r.toString()),null!=e&&e.addSuffix?e.comparison&&e.comparison>0?"in "+t:t+" ago":t},formatLong:N,formatRelative:function(n,r,e,t){return H[n]},localize:X,match:K,options:{weekStartsOn:0,firstWeekContainsDate:1}};var rn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,en=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,tn=/^'([^]*?)'?$/,on=/''/g,an=/[a-zA-Z]/;function An(n){var r=n.match(tn);return r?r[1].replace(on,"'"):n}var dn=e(379),sn=e.n(dn),ln=e(795),cn=e.n(ln),un=e(569),pn=e.n(un),gn=e(565),hn=e.n(gn),Cn=e(216),mn=e.n(Cn),fn=e(589),bn=e.n(fn),xn=e(211),In={};In.styleTagTransform=bn(),In.setAttributes=hn(),In.insert=pn().bind(null,"head"),In.domAPI=cn(),In.insertStyleElement=mn(),sn()(xn.Z,In),xn.Z&&xn.Z.locals&&xn.Z.locals;var wn=e(206),Bn={};Bn.styleTagTransform=bn(),Bn.setAttributes=hn(),Bn.insert=pn().bind(null,"head"),Bn.domAPI=cn(),Bn.insertStyleElement=mn(),sn()(wn.Z,Bn),wn.Z&&wn.Z.locals&&wn.Z.locals;var yn=e(193),vn={};vn.styleTagTransform=bn(),vn.setAttributes=hn(),vn.insert=pn().bind(null,"head"),vn.domAPI=cn(),vn.insertStyleElement=mn(),sn()(yn.Z,vn),yn.Z&&yn.Z.locals&&yn.Z.locals;var kn=e(772),En={};En.styleTagTransform=bn(),En.setAttributes=hn(),En.insert=pn().bind(null,"head"),En.domAPI=cn(),En.insertStyleElement=mn(),sn()(kn.Z,En),kn.Z&&kn.Z.locals&&kn.Z.locals;var Tn=e(291),Sn={};Sn.styleTagTransform=bn(),Sn.setAttributes=hn(),Sn.insert=pn().bind(null,"head"),Sn.domAPI=cn(),Sn.insertStyleElement=mn(),sn()(Tn.Z,Sn),Tn.Z&&Tn.Z.locals&&Tn.Z.locals;var jn=e(430),Un={};Un.styleTagTransform=bn(),Un.setAttributes=hn(),Un.insert=pn().bind(null,"head"),Un.domAPI=cn(),Un.insertStyleElement=mn(),sn()(jn.Z,Un),jn.Z&&jn.Z.locals&&jn.Z.locals;const Yn=document.querySelector(".content"),Qn=(document.querySelector(".add-button"),document.querySelector(".details-button"),document.querySelector(".home"),document.querySelector(".details-window")),Dn=document.querySelector(".edit-window"),Mn=(document.querySelector(".edit-button"),document.querySelector(".overlay")),qn=document.querySelector(".close-details-button"),Wn=document.querySelector(".close-edit-button"),zn=document.querySelector(".add-task"),Pn=document.querySelector(".todo-content"),Ln=document.querySelector(".edit-title-input"),Zn=document.querySelector(".edit-details-input"),On=document.querySelector(".edit-date-input"),Fn=document.querySelector(".edit-priority-input"),Gn=(document.querySelector(".edit-project-input"),document.querySelector(".submit-edit")),Nn=document.querySelector(".details-label"),Hn=document.querySelector(".details-title"),Rn=document.querySelector(".details-description"),Xn=document.querySelector(".details-priority"),Jn=document.querySelector(".details-dueDate"),Vn=document.querySelector(".nav-toggle"),_n=document.querySelector("nav"),$n=document.querySelector(".fullscreen-btn"),Kn=document.querySelector(".add-project-btn"),nr=document.querySelector(".project-window"),rr=document.querySelector(".project-name-input"),er=document.querySelector(".submit-project"),tr=document.querySelector(".close-project-window"),or=document.querySelector(".project-list"),ir=document.getElementsByClassName("select-project"),ar=document.querySelector(".content-header"),Ar=e.p+"c11ca64583db9195885d.svg";let dr=!0,sr=!1;function lr(n){Mn.classList.remove("overlay-display-none"),n.classList.remove("display-none"),sr=!sr,console.log("Is window open",sr),console.log("Is Navbar open",dr)}function cr(n){n.classList.add("display-none"),sr=!sr,!dr&&screen.width<500||(console.log("Is window open",sr),console.log("Is Navbar open",dr),Mn.classList.add("overlay-display-none"))}function ur(){console.log("Is window open",sr),console.log("Is Navbar open",dr),screen.width<500?!dr&&sr?(_n.classList.add("nav-close"),Yn.classList.add("content-expand"),Mn.classList.add("overlay-display-none")):dr||sr?(_n.classList.remove("nav-close"),Yn.classList.remove("content-expand"),Mn.classList.remove("overlay-display-none")):(_n.classList.add("nav-close"),Yn.classList.add("content-expand"),Mn.classList.add("overlay-display-none")):(_n.classList.toggle("nav-close"),Yn.classList.toggle("content-expand")),dr=!dr}function pr(n,r,e,t,o){Hn.innerText=n,console.log("🚀 ~ file: detailsWindow.js ~ line 38 ~ altDetailsComponent ~ detailsTitle",Hn),Rn.innerText=r,Nn.innerText="Project: "+o,Nn.style.textTransform="capitalize",Xn.innerText=e,Jn.innerText="Due date: "+t}const gr=function(n,r,e,t,o,i){let a=i;const A=document.createElement("div");A.classList.add("todo-item");const d=document.createElement("div"),s=document.createElement("input");s.type="checkbox";const l=document.createElement("p");l.classList.add("title"),l.innerText=n,d.append(s,l);const c=document.createElement("div"),u=document.createElement("button");u.classList.add("details-button"),u.innerText="Info";const p=document.createElement("img");p.classList.add("edit-button"),p.src=Ar;const g=document.createElement("button");g.classList.add("delete-button"),g.innerText="Del",g.addEventListener("click",(()=>{Ir.deleteTask(a)}));const h=document.createElement("p");return h.classList.add("date"),h.innerText=t,c.append(u,p,h,g),A.append(d,c),u.addEventListener("click",(()=>{lr(Qn),pr(n,r,e,t,o)})),l.addEventListener("click",(()=>{lr(Qn),console.log("Item Index= ",a),pr(n,r,e,t,o)})),p.addEventListener("click",(()=>{!function(n,r,e,t,o){Ln.value=n,Zn.value=r,On.value=t,Fn.value=e,lr(Dn)}(n,r,e,t)})),Wn.addEventListener("click",(()=>{cr(Dn)})),qn.addEventListener("click",(()=>{cr(Qn),console.log("Close Details")})),A},hr=class{constructor(n,r){this.arrayOfTodos=n,this.nameOfProject=r}displayTasks(){Pn.innerHTML="",this.arrayOfTodos.forEach(((n,r)=>{Pn.append(gr(n.title,n.details,n.priority,n.dueDate,n.project,r))}))}addTask(n){this.arrayOfTodos.unshift(n),Pn.innerHTML="",this.displayTasks(),cr(Dn)}addTaskWindow(){lr(Dn)}deleteTask(n){this.arrayOfTodos.splice(n,1),this.displayTasks()}};let Cr,mr;function fr(){for(let n=0;n<ir.length;n++)ir[n].addEventListener("click",(r=>{Pn.innerHTML="",console.log("InnerText: ",ir[n].innerText),console.log("Selected Project: ",Cr),console.log("🚀 ~ file: index.js ~ line 55 ~ currentProjectElement",mr),console.log("Current Project Array: ",Ir),xr.forEach((r=>{r.nameOfProject==ir[n].innerText&&(Cr=ir[n].innerText,mr&&mr.classList.remove("project-selected"),mr=ir[n],mr.classList.add("project-selected"),ar.innerText="-- "+ir[n].innerText+" --",Ir=r,Ir.displayTasks(),console.log("Selected Project: ",Cr),console.log("🚀 ~ file: index.js ~ line 55 ~ currentProjectElement",mr),console.log("Current Project Array: ",Ir))}))}))}console.log(function(r,e,t){var A,s,l,c,u,p,g,C,m,f,b,x,I,w,B,y,v,k;n(2,arguments);var E=String(e),T=h(),S=null!==(A=null!==(s=null==t?void 0:t.locale)&&void 0!==s?s:T.locale)&&void 0!==A?A:nn,j=a(null!==(l=null!==(c=null!==(u=null!==(p=null==t?void 0:t.firstWeekContainsDate)&&void 0!==p?p:null==t||null===(g=t.locale)||void 0===g||null===(C=g.options)||void 0===C?void 0:C.firstWeekContainsDate)&&void 0!==u?u:T.firstWeekContainsDate)&&void 0!==c?c:null===(m=T.locale)||void 0===m||null===(f=m.options)||void 0===f?void 0:f.firstWeekContainsDate)&&void 0!==l?l:1);if(!(j>=1&&j<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var U=a(null!==(b=null!==(x=null!==(I=null!==(w=null==t?void 0:t.weekStartsOn)&&void 0!==w?w:null==t||null===(B=t.locale)||void 0===B||null===(y=B.options)||void 0===y?void 0:y.weekStartsOn)&&void 0!==I?I:T.weekStartsOn)&&void 0!==x?x:null===(v=T.locale)||void 0===v||null===(k=v.options)||void 0===k?void 0:k.weekStartsOn)&&void 0!==b?b:0);if(!(U>=0&&U<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!S.localize)throw new RangeError("locale must contain localize property");if(!S.formatLong)throw new RangeError("locale must contain formatLong property");var Y=o(r);if(!i(Y))throw new RangeError("Invalid time value");var D=W(Y),M=d(Y,D),z={firstWeekContainsDate:j,weekStartsOn:U,locale:S,_originalDate:Y},P=E.match(en).map((function(n){var r=n[0];return"p"===r||"P"===r?(0,q[r])(n,S.formatLong):n})).join("").match(rn).map((function(n){if("''"===n)return"'";var o=n[0];if("'"===o)return An(n);var i=Q[o];if(i)return null!=t&&t.useAdditionalWeekYearTokens||!Z(n)||O(n,e,String(r)),null!=t&&t.useAdditionalDayOfYearTokens||!L(n)||O(n,e,String(r)),i(M,n,S.localize,z);if(o.match(an))throw new RangeError("Format string contains an unescaped latin alphabet character `"+o+"`");return n})).join("");return P}(new Date(2022,2,43),"MM/dd/yyyy")),er.addEventListener("click",(()=>{const n=document.createElement("div");n.classList.add("select-project"),n.innerText=rr.value,or.appendChild(n),cr(nr),console.log(or),fr(),xr.push(new hr([{project:rr.value}])),xr.push(new hr([],rr.value)),console.log("New Project: ",xr)})),Kn.addEventListener("click",(()=>{lr(nr)})),tr.addEventListener("click",(()=>{console.log("Hello project"),cr(nr)})),$n.addEventListener("click",(()=>{const n=document.documentElement;n.requestFullscreen?n.requestFullscreen():n.webkitRequestFullscreen?n.webkitRequestFullscreen():n.msRequestFullscreen&&n.msRequestFullscreen()})),window.onload=function(){screen.width<500&&ur()},Vn.addEventListener("click",(()=>{ur()})),Wn.addEventListener("click",(()=>{cr(Dn)})),qn.addEventListener("click",(()=>{cr(Qn),console.log("Close Details")})),fr();const br=new hr([{project:"Home",priority:"Medium",title:"House cleaning day",details:"Don't forget the toilets",dueDate:"12/12/4314",complete:!1},{project:"Home",priority:"High",title:"House task",details:"Ask Rhoda for her math assignment",dueDate:"12/12/4824",complete:!1},{project:"Home",priority:"Low",title:"Another house task",details:"Gym registration.",dueDate:"12/12/4124",complete:!1}],"Home");let xr=[br];[[{project:"School",priority:"Urgent",title:"Attend Math class",details:"Don't miss Sunday's math class",dueDate:"12/12/4314",complete:!1},{project:"School",priority:"Medium",title:"Go home",details:"Don't hang around school",dueDate:"12/12/4314",complete:!1},{project:"School",priority:"Low",title:"Help the old lady",details:"The old lady across the road",dueDate:"12/12/4314",complete:!1}],[{project:"Inbox",priority:"low",title:"Get registered",details:"Say hello",dueDate:"12/12/4314",complete:!1},{project:"Inbox",priority:"Medium",title:"Exercise task 2",details:"ljnwdlvkn olskvmm",dueDate:"12/12/4314",complete:!1},{project:"Inbox",priority:"Low",title:"Some random exercise title",details:"Some random exercise description",dueDate:"12/12/4314",complete:!1}]].forEach((n=>{let r=new hr(n,n[0].project);xr.push(r)}));let Ir="Inbox";zn.addEventListener("click",(()=>{br.addTaskWindow(Dn)})),Gn.addEventListener("click",(()=>{console.log("Current: ",Ir),Ir.addTask({title:Ln.value,details:Zn.value,priority:Fn.value,dueDate:On.value,project:Ir.nameOfProject,complete:!1}),console.log("Current Project: ",Ir)})),ir[0].click()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,